
stm32f303k8t6_i2c_master_hal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f90  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08004118  08004118  00005118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004148  08004148  00006020  2**0
                  CONTENTS
  4 .ARM          00000000  08004148  08004148  00006020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004148  08004148  00006020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004148  08004148  00005148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800414c  0800414c  0000514c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000020  20000000  08004150  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006020  2**0
                  CONTENTS
 10 .bss          000000c8  20000020  20000020  00006020  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000e8  200000e8  00006020  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006020  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000874b  00000000  00000000  00006050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b9d  00000000  00000000  0000e79b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007e8  00000000  00000000  00010338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005f2  00000000  00000000  00010b20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001998f  00000000  00000000  00011112  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bc03  00000000  00000000  0002aaa1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00093ac1  00000000  00000000  000366a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000ca165  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001e88  00000000  00000000  000ca1a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000070  00000000  00000000  000cc030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000020 	.word	0x20000020
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004100 	.word	0x08004100

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000024 	.word	0x20000024
 80001c4:	08004100 	.word	0x08004100

080001c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b088      	sub	sp, #32
 80001cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001ce:	f107 030c 	add.w	r3, r7, #12
 80001d2:	2200      	movs	r2, #0
 80001d4:	601a      	str	r2, [r3, #0]
 80001d6:	605a      	str	r2, [r3, #4]
 80001d8:	609a      	str	r2, [r3, #8]
 80001da:	60da      	str	r2, [r3, #12]
 80001dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80001de:	4b1d      	ldr	r3, [pc, #116]	@ (8000254 <MX_GPIO_Init+0x8c>)
 80001e0:	695b      	ldr	r3, [r3, #20]
 80001e2:	4a1c      	ldr	r2, [pc, #112]	@ (8000254 <MX_GPIO_Init+0x8c>)
 80001e4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80001e8:	6153      	str	r3, [r2, #20]
 80001ea:	4b1a      	ldr	r3, [pc, #104]	@ (8000254 <MX_GPIO_Init+0x8c>)
 80001ec:	695b      	ldr	r3, [r3, #20]
 80001ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80001f2:	60bb      	str	r3, [r7, #8]
 80001f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001f6:	4b17      	ldr	r3, [pc, #92]	@ (8000254 <MX_GPIO_Init+0x8c>)
 80001f8:	695b      	ldr	r3, [r3, #20]
 80001fa:	4a16      	ldr	r2, [pc, #88]	@ (8000254 <MX_GPIO_Init+0x8c>)
 80001fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000200:	6153      	str	r3, [r2, #20]
 8000202:	4b14      	ldr	r3, [pc, #80]	@ (8000254 <MX_GPIO_Init+0x8c>)
 8000204:	695b      	ldr	r3, [r3, #20]
 8000206:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800020a:	607b      	str	r3, [r7, #4]
 800020c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800020e:	4b11      	ldr	r3, [pc, #68]	@ (8000254 <MX_GPIO_Init+0x8c>)
 8000210:	695b      	ldr	r3, [r3, #20]
 8000212:	4a10      	ldr	r2, [pc, #64]	@ (8000254 <MX_GPIO_Init+0x8c>)
 8000214:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000218:	6153      	str	r3, [r2, #20]
 800021a:	4b0e      	ldr	r3, [pc, #56]	@ (8000254 <MX_GPIO_Init+0x8c>)
 800021c:	695b      	ldr	r3, [r3, #20]
 800021e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000222:	603b      	str	r3, [r7, #0]
 8000224:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000226:	2200      	movs	r2, #0
 8000228:	2120      	movs	r1, #32
 800022a:	480b      	ldr	r0, [pc, #44]	@ (8000258 <MX_GPIO_Init+0x90>)
 800022c:	f000 fd9e 	bl	8000d6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000230:	2320      	movs	r3, #32
 8000232:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000234:	2301      	movs	r3, #1
 8000236:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000238:	2300      	movs	r3, #0
 800023a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800023c:	2300      	movs	r3, #0
 800023e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000240:	f107 030c 	add.w	r3, r7, #12
 8000244:	4619      	mov	r1, r3
 8000246:	4804      	ldr	r0, [pc, #16]	@ (8000258 <MX_GPIO_Init+0x90>)
 8000248:	f000 fc1e 	bl	8000a88 <HAL_GPIO_Init>

}
 800024c:	bf00      	nop
 800024e:	3720      	adds	r7, #32
 8000250:	46bd      	mov	sp, r7
 8000252:	bd80      	pop	{r7, pc}
 8000254:	40021000 	.word	0x40021000
 8000258:	48000400 	.word	0x48000400

0800025c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000260:	4b1b      	ldr	r3, [pc, #108]	@ (80002d0 <MX_I2C1_Init+0x74>)
 8000262:	4a1c      	ldr	r2, [pc, #112]	@ (80002d4 <MX_I2C1_Init+0x78>)
 8000264:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 8000266:	4b1a      	ldr	r3, [pc, #104]	@ (80002d0 <MX_I2C1_Init+0x74>)
 8000268:	f240 220b 	movw	r2, #523	@ 0x20b
 800026c:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800026e:	4b18      	ldr	r3, [pc, #96]	@ (80002d0 <MX_I2C1_Init+0x74>)
 8000270:	2200      	movs	r2, #0
 8000272:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000274:	4b16      	ldr	r3, [pc, #88]	@ (80002d0 <MX_I2C1_Init+0x74>)
 8000276:	2201      	movs	r2, #1
 8000278:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800027a:	4b15      	ldr	r3, [pc, #84]	@ (80002d0 <MX_I2C1_Init+0x74>)
 800027c:	2200      	movs	r2, #0
 800027e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000280:	4b13      	ldr	r3, [pc, #76]	@ (80002d0 <MX_I2C1_Init+0x74>)
 8000282:	2200      	movs	r2, #0
 8000284:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000286:	4b12      	ldr	r3, [pc, #72]	@ (80002d0 <MX_I2C1_Init+0x74>)
 8000288:	2200      	movs	r2, #0
 800028a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800028c:	4b10      	ldr	r3, [pc, #64]	@ (80002d0 <MX_I2C1_Init+0x74>)
 800028e:	2200      	movs	r2, #0
 8000290:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000292:	4b0f      	ldr	r3, [pc, #60]	@ (80002d0 <MX_I2C1_Init+0x74>)
 8000294:	2200      	movs	r2, #0
 8000296:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000298:	480d      	ldr	r0, [pc, #52]	@ (80002d0 <MX_I2C1_Init+0x74>)
 800029a:	f000 fd7f 	bl	8000d9c <HAL_I2C_Init>
 800029e:	4603      	mov	r3, r0
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d001      	beq.n	80002a8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80002a4:	f000 f984 	bl	80005b0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80002a8:	2100      	movs	r1, #0
 80002aa:	4809      	ldr	r0, [pc, #36]	@ (80002d0 <MX_I2C1_Init+0x74>)
 80002ac:	f002 fb30 	bl	8002910 <HAL_I2CEx_ConfigAnalogFilter>
 80002b0:	4603      	mov	r3, r0
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d001      	beq.n	80002ba <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80002b6:	f000 f97b 	bl	80005b0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80002ba:	2100      	movs	r1, #0
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <MX_I2C1_Init+0x74>)
 80002be:	f002 fb72 	bl	80029a6 <HAL_I2CEx_ConfigDigitalFilter>
 80002c2:	4603      	mov	r3, r0
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d001      	beq.n	80002cc <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80002c8:	f000 f972 	bl	80005b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80002cc:	bf00      	nop
 80002ce:	bd80      	pop	{r7, pc}
 80002d0:	2000003c 	.word	0x2000003c
 80002d4:	40005400 	.word	0x40005400

080002d8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b08a      	sub	sp, #40	@ 0x28
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002e0:	f107 0314 	add.w	r3, r7, #20
 80002e4:	2200      	movs	r2, #0
 80002e6:	601a      	str	r2, [r3, #0]
 80002e8:	605a      	str	r2, [r3, #4]
 80002ea:	609a      	str	r2, [r3, #8]
 80002ec:	60da      	str	r2, [r3, #12]
 80002ee:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	4a1f      	ldr	r2, [pc, #124]	@ (8000374 <HAL_I2C_MspInit+0x9c>)
 80002f6:	4293      	cmp	r3, r2
 80002f8:	d137      	bne.n	800036a <HAL_I2C_MspInit+0x92>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80002fa:	4b1f      	ldr	r3, [pc, #124]	@ (8000378 <HAL_I2C_MspInit+0xa0>)
 80002fc:	695b      	ldr	r3, [r3, #20]
 80002fe:	4a1e      	ldr	r2, [pc, #120]	@ (8000378 <HAL_I2C_MspInit+0xa0>)
 8000300:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000304:	6153      	str	r3, [r2, #20]
 8000306:	4b1c      	ldr	r3, [pc, #112]	@ (8000378 <HAL_I2C_MspInit+0xa0>)
 8000308:	695b      	ldr	r3, [r3, #20]
 800030a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800030e:	613b      	str	r3, [r7, #16]
 8000310:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000312:	23c0      	movs	r3, #192	@ 0xc0
 8000314:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000316:	2312      	movs	r3, #18
 8000318:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800031a:	2300      	movs	r3, #0
 800031c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800031e:	2303      	movs	r3, #3
 8000320:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000322:	2304      	movs	r3, #4
 8000324:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000326:	f107 0314 	add.w	r3, r7, #20
 800032a:	4619      	mov	r1, r3
 800032c:	4813      	ldr	r0, [pc, #76]	@ (800037c <HAL_I2C_MspInit+0xa4>)
 800032e:	f000 fbab 	bl	8000a88 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000332:	4b11      	ldr	r3, [pc, #68]	@ (8000378 <HAL_I2C_MspInit+0xa0>)
 8000334:	69db      	ldr	r3, [r3, #28]
 8000336:	4a10      	ldr	r2, [pc, #64]	@ (8000378 <HAL_I2C_MspInit+0xa0>)
 8000338:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800033c:	61d3      	str	r3, [r2, #28]
 800033e:	4b0e      	ldr	r3, [pc, #56]	@ (8000378 <HAL_I2C_MspInit+0xa0>)
 8000340:	69db      	ldr	r3, [r3, #28]
 8000342:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000346:	60fb      	str	r3, [r7, #12]
 8000348:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800034a:	2200      	movs	r2, #0
 800034c:	2100      	movs	r1, #0
 800034e:	201f      	movs	r0, #31
 8000350:	f000 fb19 	bl	8000986 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000354:	201f      	movs	r0, #31
 8000356:	f000 fb32 	bl	80009be <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800035a:	2200      	movs	r2, #0
 800035c:	2100      	movs	r1, #0
 800035e:	2020      	movs	r0, #32
 8000360:	f000 fb11 	bl	8000986 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000364:	2020      	movs	r0, #32
 8000366:	f000 fb2a 	bl	80009be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800036a:	bf00      	nop
 800036c:	3728      	adds	r7, #40	@ 0x28
 800036e:	46bd      	mov	sp, r7
 8000370:	bd80      	pop	{r7, pc}
 8000372:	bf00      	nop
 8000374:	40005400 	.word	0x40005400
 8000378:	40021000 	.word	0x40021000
 800037c:	48000400 	.word	0x48000400

08000380 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b082      	sub	sp, #8
 8000384:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000386:	f000 f9bd 	bl	8000704 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800038a:	f000 f84f 	bl	800042c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800038e:	f7ff ff1b 	bl	80001c8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000392:	f7ff ff63 	bl	800025c <MX_I2C1_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  // Цикл передачи и приёма данных
	  for (uint8_t i = 0; i < 8; i++)  // номер платы
 8000396:	2300      	movs	r3, #0
 8000398:	71fb      	strb	r3, [r7, #7]
 800039a:	e039      	b.n	8000410 <main+0x90>
	  	{
	  		for (uint8_t j = 0; j < 10; j++) // номер команды
 800039c:	2300      	movs	r3, #0
 800039e:	71bb      	strb	r3, [r7, #6]
 80003a0:	e030      	b.n	8000404 <main+0x84>
	  		{
	  			// Передача [адрес платы = i], j, количество байт.
	  			transferInProgress = 1;
 80003a2:	4b1d      	ldr	r3, [pc, #116]	@ (8000418 <main+0x98>)
 80003a4:	2201      	movs	r2, #1
 80003a6:	701a      	strb	r2, [r3, #0]
	  			I2C_TRANSMIT_IT(ADDRESS[i], &COMMAND[j], 1);
 80003a8:	79fb      	ldrb	r3, [r7, #7]
 80003aa:	4a1c      	ldr	r2, [pc, #112]	@ (800041c <main+0x9c>)
 80003ac:	5cd3      	ldrb	r3, [r2, r3]
 80003ae:	4618      	mov	r0, r3
 80003b0:	79bb      	ldrb	r3, [r7, #6]
 80003b2:	4a1b      	ldr	r2, [pc, #108]	@ (8000420 <main+0xa0>)
 80003b4:	4413      	add	r3, r2
 80003b6:	2201      	movs	r2, #1
 80003b8:	4619      	mov	r1, r3
 80003ba:	f000 f895 	bl	80004e8 <I2C_TRANSMIT_IT>

	  			while (transferInProgress)
 80003be:	bf00      	nop
 80003c0:	4b15      	ldr	r3, [pc, #84]	@ (8000418 <main+0x98>)
 80003c2:	781b      	ldrb	r3, [r3, #0]
 80003c4:	b2db      	uxtb	r3, r3
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d1fa      	bne.n	80003c0 <main+0x40>
	  			{
	  				// Можно добавить здесь тайм-аут для выхода из цикла ожидания в случае ошибки
	  			}

	  			// Приём от слэйва и сохранение значения в переменную.
	  			receiveInProgress = 1;
 80003ca:	4b16      	ldr	r3, [pc, #88]	@ (8000424 <main+0xa4>)
 80003cc:	2201      	movs	r2, #1
 80003ce:	701a      	strb	r2, [r3, #0]
	  			I2C_RECEIVE_IT(ADDRESS[i], &receivedData[i][j], 1);
 80003d0:	79fb      	ldrb	r3, [r7, #7]
 80003d2:	4a12      	ldr	r2, [pc, #72]	@ (800041c <main+0x9c>)
 80003d4:	5cd3      	ldrb	r3, [r2, r3]
 80003d6:	4618      	mov	r0, r3
 80003d8:	79fa      	ldrb	r2, [r7, #7]
 80003da:	79b9      	ldrb	r1, [r7, #6]
 80003dc:	4613      	mov	r3, r2
 80003de:	009b      	lsls	r3, r3, #2
 80003e0:	4413      	add	r3, r2
 80003e2:	005b      	lsls	r3, r3, #1
 80003e4:	440b      	add	r3, r1
 80003e6:	4a10      	ldr	r2, [pc, #64]	@ (8000428 <main+0xa8>)
 80003e8:	4413      	add	r3, r2
 80003ea:	2201      	movs	r2, #1
 80003ec:	4619      	mov	r1, r3
 80003ee:	f000 f8b1 	bl	8000554 <I2C_RECEIVE_IT>

	  			while (receiveInProgress)
 80003f2:	bf00      	nop
 80003f4:	4b0b      	ldr	r3, [pc, #44]	@ (8000424 <main+0xa4>)
 80003f6:	781b      	ldrb	r3, [r3, #0]
 80003f8:	b2db      	uxtb	r3, r3
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d1fa      	bne.n	80003f4 <main+0x74>
	  		for (uint8_t j = 0; j < 10; j++) // номер команды
 80003fe:	79bb      	ldrb	r3, [r7, #6]
 8000400:	3301      	adds	r3, #1
 8000402:	71bb      	strb	r3, [r7, #6]
 8000404:	79bb      	ldrb	r3, [r7, #6]
 8000406:	2b09      	cmp	r3, #9
 8000408:	d9cb      	bls.n	80003a2 <main+0x22>
	  for (uint8_t i = 0; i < 8; i++)  // номер платы
 800040a:	79fb      	ldrb	r3, [r7, #7]
 800040c:	3301      	adds	r3, #1
 800040e:	71fb      	strb	r3, [r7, #7]
 8000410:	79fb      	ldrb	r3, [r7, #7]
 8000412:	2b07      	cmp	r3, #7
 8000414:	d9c2      	bls.n	800039c <main+0x1c>
 8000416:	e7be      	b.n	8000396 <main+0x16>
 8000418:	20000090 	.word	0x20000090
 800041c:	2000000c 	.word	0x2000000c
 8000420:	20000000 	.word	0x20000000
 8000424:	20000091 	.word	0x20000091
 8000428:	20000094 	.word	0x20000094

0800042c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b096      	sub	sp, #88	@ 0x58
 8000430:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000432:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000436:	2228      	movs	r2, #40	@ 0x28
 8000438:	2100      	movs	r1, #0
 800043a:	4618      	mov	r0, r3
 800043c:	f003 fe34 	bl	80040a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000440:	f107 031c 	add.w	r3, r7, #28
 8000444:	2200      	movs	r2, #0
 8000446:	601a      	str	r2, [r3, #0]
 8000448:	605a      	str	r2, [r3, #4]
 800044a:	609a      	str	r2, [r3, #8]
 800044c:	60da      	str	r2, [r3, #12]
 800044e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000450:	1d3b      	adds	r3, r7, #4
 8000452:	2200      	movs	r2, #0
 8000454:	601a      	str	r2, [r3, #0]
 8000456:	605a      	str	r2, [r3, #4]
 8000458:	609a      	str	r2, [r3, #8]
 800045a:	60da      	str	r2, [r3, #12]
 800045c:	611a      	str	r2, [r3, #16]
 800045e:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000460:	2303      	movs	r3, #3
 8000462:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000464:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000468:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800046a:	2300      	movs	r3, #0
 800046c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800046e:	2301      	movs	r3, #1
 8000470:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000472:	2310      	movs	r3, #16
 8000474:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000476:	2302      	movs	r3, #2
 8000478:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800047a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800047e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000480:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000484:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000486:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800048a:	4618      	mov	r0, r3
 800048c:	f002 fad8 	bl	8002a40 <HAL_RCC_OscConfig>
 8000490:	4603      	mov	r3, r0
 8000492:	2b00      	cmp	r3, #0
 8000494:	d001      	beq.n	800049a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000496:	f000 f88b 	bl	80005b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800049a:	230f      	movs	r3, #15
 800049c:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800049e:	2302      	movs	r3, #2
 80004a0:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004a2:	2300      	movs	r3, #0
 80004a4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80004aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004ac:	2300      	movs	r3, #0
 80004ae:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004b0:	f107 031c 	add.w	r3, r7, #28
 80004b4:	2102      	movs	r1, #2
 80004b6:	4618      	mov	r0, r3
 80004b8:	f003 fb00 	bl	8003abc <HAL_RCC_ClockConfig>
 80004bc:	4603      	mov	r3, r0
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d001      	beq.n	80004c6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80004c2:	f000 f875 	bl	80005b0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80004c6:	2320      	movs	r3, #32
 80004c8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80004ca:	2300      	movs	r3, #0
 80004cc:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004ce:	1d3b      	adds	r3, r7, #4
 80004d0:	4618      	mov	r0, r3
 80004d2:	f003 fcc3 	bl	8003e5c <HAL_RCCEx_PeriphCLKConfig>
 80004d6:	4603      	mov	r3, r0
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d001      	beq.n	80004e0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80004dc:	f000 f868 	bl	80005b0 <Error_Handler>
  }
}
 80004e0:	bf00      	nop
 80004e2:	3758      	adds	r7, #88	@ 0x58
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}

080004e8 <I2C_TRANSMIT_IT>:

/* USER CODE BEGIN 4 */
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Функция передачи данных
void I2C_TRANSMIT_IT(uint8_t DevAddress, uint8_t *pData, uint8_t Size)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	4603      	mov	r3, r0
 80004f0:	6039      	str	r1, [r7, #0]
 80004f2:	71fb      	strb	r3, [r7, #7]
 80004f4:	4613      	mov	r3, r2
 80004f6:	71bb      	strb	r3, [r7, #6]


  if (HAL_I2C_Master_Transmit_IT(&hi2c1, DevAddress, pData, Size) != HAL_OK)
 80004f8:	79fb      	ldrb	r3, [r7, #7]
 80004fa:	b299      	uxth	r1, r3
 80004fc:	79bb      	ldrb	r3, [r7, #6]
 80004fe:	b29b      	uxth	r3, r3
 8000500:	683a      	ldr	r2, [r7, #0]
 8000502:	4807      	ldr	r0, [pc, #28]	@ (8000520 <I2C_TRANSMIT_IT+0x38>)
 8000504:	f000 fce6 	bl	8000ed4 <HAL_I2C_Master_Transmit_IT>
 8000508:	4603      	mov	r3, r0
 800050a:	2b00      	cmp	r3, #0
 800050c:	d004      	beq.n	8000518 <I2C_TRANSMIT_IT+0x30>
  {
	// Обработка ошибки
	transferInProgress = 0;
 800050e:	4b05      	ldr	r3, [pc, #20]	@ (8000524 <I2C_TRANSMIT_IT+0x3c>)
 8000510:	2200      	movs	r2, #0
 8000512:	701a      	strb	r2, [r3, #0]
    Error_Handler();
 8000514:	f000 f84c 	bl	80005b0 <Error_Handler>
  }
}
 8000518:	bf00      	nop
 800051a:	3708      	adds	r7, #8
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}
 8000520:	2000003c 	.word	0x2000003c
 8000524:	20000090 	.word	0x20000090

08000528 <HAL_I2C_MasterTxCpltCallback>:
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Callback функция при успешной передаче от мастера слейву
void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000528:	b480      	push	{r7}
 800052a:	b083      	sub	sp, #12
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
    // Проверим, пришла ли команда и проверим ее содержание
    if (hi2c->Instance->ISR & I2C_ISR_ADDR)
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	699b      	ldr	r3, [r3, #24]
 8000536:	f003 0308 	and.w	r3, r3, #8
 800053a:	2b00      	cmp	r3, #0
 800053c:	d002      	beq.n	8000544 <HAL_I2C_MasterTxCpltCallback+0x1c>
    {

    	  transferInProgress = 0;
 800053e:	4b04      	ldr	r3, [pc, #16]	@ (8000550 <HAL_I2C_MasterTxCpltCallback+0x28>)
 8000540:	2200      	movs	r2, #0
 8000542:	701a      	strb	r2, [r3, #0]


    }
}
 8000544:	bf00      	nop
 8000546:	370c      	adds	r7, #12
 8000548:	46bd      	mov	sp, r7
 800054a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054e:	4770      	bx	lr
 8000550:	20000090 	.word	0x20000090

08000554 <I2C_RECEIVE_IT>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Функция приёма данных
void I2C_RECEIVE_IT(uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
 800055a:	4603      	mov	r3, r0
 800055c:	6039      	str	r1, [r7, #0]
 800055e:	80fb      	strh	r3, [r7, #6]
 8000560:	4613      	mov	r3, r2
 8000562:	80bb      	strh	r3, [r7, #4]
    if (HAL_I2C_Master_Receive_IT(&hi2c1, DevAddress, pData, Size) != HAL_OK)
 8000564:	88bb      	ldrh	r3, [r7, #4]
 8000566:	88f9      	ldrh	r1, [r7, #6]
 8000568:	683a      	ldr	r2, [r7, #0]
 800056a:	4807      	ldr	r0, [pc, #28]	@ (8000588 <I2C_RECEIVE_IT+0x34>)
 800056c:	f000 fd4a 	bl	8001004 <HAL_I2C_Master_Receive_IT>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d004      	beq.n	8000580 <I2C_RECEIVE_IT+0x2c>
    {
        // Обработка ошибки
        receiveInProgress = 0;
 8000576:	4b05      	ldr	r3, [pc, #20]	@ (800058c <I2C_RECEIVE_IT+0x38>)
 8000578:	2200      	movs	r2, #0
 800057a:	701a      	strb	r2, [r3, #0]
        Error_Handler();
 800057c:	f000 f818 	bl	80005b0 <Error_Handler>
    }
}
 8000580:	bf00      	nop
 8000582:	3708      	adds	r7, #8
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}
 8000588:	2000003c 	.word	0x2000003c
 800058c:	20000091 	.word	0x20000091

08000590 <HAL_I2C_MasterRxCpltCallback>:
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Callback функция при успешном приеме данных от слейва к мастеру
void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000590:	b480      	push	{r7}
 8000592:	b083      	sub	sp, #12
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
	// Добавить функцию проверки успешного приёма данных
    receiveInProgress = 0;
 8000598:	4b04      	ldr	r3, [pc, #16]	@ (80005ac <HAL_I2C_MasterRxCpltCallback+0x1c>)
 800059a:	2200      	movs	r2, #0
 800059c:	701a      	strb	r2, [r3, #0]
}
 800059e:	bf00      	nop
 80005a0:	370c      	adds	r7, #12
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	20000091 	.word	0x20000091

080005b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005b4:	b672      	cpsid	i
}
 80005b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005b8:	bf00      	nop
 80005ba:	e7fd      	b.n	80005b8 <Error_Handler+0x8>

080005bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	b083      	sub	sp, #12
 80005c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000600 <HAL_MspInit+0x44>)
 80005c4:	699b      	ldr	r3, [r3, #24]
 80005c6:	4a0e      	ldr	r2, [pc, #56]	@ (8000600 <HAL_MspInit+0x44>)
 80005c8:	f043 0301 	orr.w	r3, r3, #1
 80005cc:	6193      	str	r3, [r2, #24]
 80005ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000600 <HAL_MspInit+0x44>)
 80005d0:	699b      	ldr	r3, [r3, #24]
 80005d2:	f003 0301 	and.w	r3, r3, #1
 80005d6:	607b      	str	r3, [r7, #4]
 80005d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005da:	4b09      	ldr	r3, [pc, #36]	@ (8000600 <HAL_MspInit+0x44>)
 80005dc:	69db      	ldr	r3, [r3, #28]
 80005de:	4a08      	ldr	r2, [pc, #32]	@ (8000600 <HAL_MspInit+0x44>)
 80005e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005e4:	61d3      	str	r3, [r2, #28]
 80005e6:	4b06      	ldr	r3, [pc, #24]	@ (8000600 <HAL_MspInit+0x44>)
 80005e8:	69db      	ldr	r3, [r3, #28]
 80005ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005ee:	603b      	str	r3, [r7, #0]
 80005f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005f2:	bf00      	nop
 80005f4:	370c      	adds	r7, #12
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop
 8000600:	40021000 	.word	0x40021000

08000604 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000608:	bf00      	nop
 800060a:	e7fd      	b.n	8000608 <NMI_Handler+0x4>

0800060c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000610:	bf00      	nop
 8000612:	e7fd      	b.n	8000610 <HardFault_Handler+0x4>

08000614 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000618:	bf00      	nop
 800061a:	e7fd      	b.n	8000618 <MemManage_Handler+0x4>

0800061c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000620:	bf00      	nop
 8000622:	e7fd      	b.n	8000620 <BusFault_Handler+0x4>

08000624 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000628:	bf00      	nop
 800062a:	e7fd      	b.n	8000628 <UsageFault_Handler+0x4>

0800062c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000630:	bf00      	nop
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr

0800063a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800063a:	b480      	push	{r7}
 800063c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800063e:	bf00      	nop
 8000640:	46bd      	mov	sp, r7
 8000642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000646:	4770      	bx	lr

08000648 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800064c:	bf00      	nop
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr

08000656 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000656:	b580      	push	{r7, lr}
 8000658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800065a:	f000 f899 	bl	8000790 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800065e:	bf00      	nop
 8000660:	bd80      	pop	{r7, pc}
	...

08000664 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXT line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000668:	4802      	ldr	r0, [pc, #8]	@ (8000674 <I2C1_EV_IRQHandler+0x10>)
 800066a:	f000 fd3b 	bl	80010e4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800066e:	bf00      	nop
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	2000003c 	.word	0x2000003c

08000678 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800067c:	4802      	ldr	r0, [pc, #8]	@ (8000688 <I2C1_ER_IRQHandler+0x10>)
 800067e:	f000 fd4b 	bl	8001118 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000682:	bf00      	nop
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	2000003c 	.word	0x2000003c

0800068c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000690:	4b06      	ldr	r3, [pc, #24]	@ (80006ac <SystemInit+0x20>)
 8000692:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000696:	4a05      	ldr	r2, [pc, #20]	@ (80006ac <SystemInit+0x20>)
 8000698:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800069c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006a0:	bf00      	nop
 80006a2:	46bd      	mov	sp, r7
 80006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	e000ed00 	.word	0xe000ed00

080006b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80006b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80006e8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80006b4:	f7ff ffea 	bl	800068c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006b8:	480c      	ldr	r0, [pc, #48]	@ (80006ec <LoopForever+0x6>)
  ldr r1, =_edata
 80006ba:	490d      	ldr	r1, [pc, #52]	@ (80006f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006bc:	4a0d      	ldr	r2, [pc, #52]	@ (80006f4 <LoopForever+0xe>)
  movs r3, #0
 80006be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006c0:	e002      	b.n	80006c8 <LoopCopyDataInit>

080006c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006c6:	3304      	adds	r3, #4

080006c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006cc:	d3f9      	bcc.n	80006c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006ce:	4a0a      	ldr	r2, [pc, #40]	@ (80006f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006d0:	4c0a      	ldr	r4, [pc, #40]	@ (80006fc <LoopForever+0x16>)
  movs r3, #0
 80006d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006d4:	e001      	b.n	80006da <LoopFillZerobss>

080006d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006d8:	3204      	adds	r2, #4

080006da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006dc:	d3fb      	bcc.n	80006d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006de:	f003 fceb 	bl	80040b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80006e2:	f7ff fe4d 	bl	8000380 <main>

080006e6 <LoopForever>:

LoopForever:
    b LoopForever
 80006e6:	e7fe      	b.n	80006e6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80006e8:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80006ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006f0:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 80006f4:	08004150 	.word	0x08004150
  ldr r2, =_sbss
 80006f8:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 80006fc:	200000e8 	.word	0x200000e8

08000700 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000700:	e7fe      	b.n	8000700 <ADC1_2_IRQHandler>
	...

08000704 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000708:	4b08      	ldr	r3, [pc, #32]	@ (800072c <HAL_Init+0x28>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4a07      	ldr	r2, [pc, #28]	@ (800072c <HAL_Init+0x28>)
 800070e:	f043 0310 	orr.w	r3, r3, #16
 8000712:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000714:	2003      	movs	r0, #3
 8000716:	f000 f92b 	bl	8000970 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800071a:	200f      	movs	r0, #15
 800071c:	f000 f808 	bl	8000730 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000720:	f7ff ff4c 	bl	80005bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000724:	2300      	movs	r3, #0
}
 8000726:	4618      	mov	r0, r3
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	40022000 	.word	0x40022000

08000730 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000738:	4b12      	ldr	r3, [pc, #72]	@ (8000784 <HAL_InitTick+0x54>)
 800073a:	681a      	ldr	r2, [r3, #0]
 800073c:	4b12      	ldr	r3, [pc, #72]	@ (8000788 <HAL_InitTick+0x58>)
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	4619      	mov	r1, r3
 8000742:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000746:	fbb3 f3f1 	udiv	r3, r3, r1
 800074a:	fbb2 f3f3 	udiv	r3, r2, r3
 800074e:	4618      	mov	r0, r3
 8000750:	f000 f943 	bl	80009da <HAL_SYSTICK_Config>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800075a:	2301      	movs	r3, #1
 800075c:	e00e      	b.n	800077c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	2b0f      	cmp	r3, #15
 8000762:	d80a      	bhi.n	800077a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000764:	2200      	movs	r2, #0
 8000766:	6879      	ldr	r1, [r7, #4]
 8000768:	f04f 30ff 	mov.w	r0, #4294967295
 800076c:	f000 f90b 	bl	8000986 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000770:	4a06      	ldr	r2, [pc, #24]	@ (800078c <HAL_InitTick+0x5c>)
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000776:	2300      	movs	r3, #0
 8000778:	e000      	b.n	800077c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800077a:	2301      	movs	r3, #1
}
 800077c:	4618      	mov	r0, r3
 800077e:	3708      	adds	r7, #8
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	20000014 	.word	0x20000014
 8000788:	2000001c 	.word	0x2000001c
 800078c:	20000018 	.word	0x20000018

08000790 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000794:	4b06      	ldr	r3, [pc, #24]	@ (80007b0 <HAL_IncTick+0x20>)
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	461a      	mov	r2, r3
 800079a:	4b06      	ldr	r3, [pc, #24]	@ (80007b4 <HAL_IncTick+0x24>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	4413      	add	r3, r2
 80007a0:	4a04      	ldr	r2, [pc, #16]	@ (80007b4 <HAL_IncTick+0x24>)
 80007a2:	6013      	str	r3, [r2, #0]
}
 80007a4:	bf00      	nop
 80007a6:	46bd      	mov	sp, r7
 80007a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ac:	4770      	bx	lr
 80007ae:	bf00      	nop
 80007b0:	2000001c 	.word	0x2000001c
 80007b4:	200000e4 	.word	0x200000e4

080007b8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  return uwTick;  
 80007bc:	4b03      	ldr	r3, [pc, #12]	@ (80007cc <HAL_GetTick+0x14>)
 80007be:	681b      	ldr	r3, [r3, #0]
}
 80007c0:	4618      	mov	r0, r3
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop
 80007cc:	200000e4 	.word	0x200000e4

080007d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b085      	sub	sp, #20
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	f003 0307 	and.w	r3, r3, #7
 80007de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000814 <__NVIC_SetPriorityGrouping+0x44>)
 80007e2:	68db      	ldr	r3, [r3, #12]
 80007e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007e6:	68ba      	ldr	r2, [r7, #8]
 80007e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80007ec:	4013      	ands	r3, r2
 80007ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007f4:	68bb      	ldr	r3, [r7, #8]
 80007f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80007fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000800:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000802:	4a04      	ldr	r2, [pc, #16]	@ (8000814 <__NVIC_SetPriorityGrouping+0x44>)
 8000804:	68bb      	ldr	r3, [r7, #8]
 8000806:	60d3      	str	r3, [r2, #12]
}
 8000808:	bf00      	nop
 800080a:	3714      	adds	r7, #20
 800080c:	46bd      	mov	sp, r7
 800080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000812:	4770      	bx	lr
 8000814:	e000ed00 	.word	0xe000ed00

08000818 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800081c:	4b04      	ldr	r3, [pc, #16]	@ (8000830 <__NVIC_GetPriorityGrouping+0x18>)
 800081e:	68db      	ldr	r3, [r3, #12]
 8000820:	0a1b      	lsrs	r3, r3, #8
 8000822:	f003 0307 	and.w	r3, r3, #7
}
 8000826:	4618      	mov	r0, r3
 8000828:	46bd      	mov	sp, r7
 800082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082e:	4770      	bx	lr
 8000830:	e000ed00 	.word	0xe000ed00

08000834 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
 800083a:	4603      	mov	r3, r0
 800083c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800083e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000842:	2b00      	cmp	r3, #0
 8000844:	db0b      	blt.n	800085e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000846:	79fb      	ldrb	r3, [r7, #7]
 8000848:	f003 021f 	and.w	r2, r3, #31
 800084c:	4907      	ldr	r1, [pc, #28]	@ (800086c <__NVIC_EnableIRQ+0x38>)
 800084e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000852:	095b      	lsrs	r3, r3, #5
 8000854:	2001      	movs	r0, #1
 8000856:	fa00 f202 	lsl.w	r2, r0, r2
 800085a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800085e:	bf00      	nop
 8000860:	370c      	adds	r7, #12
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	e000e100 	.word	0xe000e100

08000870 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000870:	b480      	push	{r7}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
 8000876:	4603      	mov	r3, r0
 8000878:	6039      	str	r1, [r7, #0]
 800087a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800087c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000880:	2b00      	cmp	r3, #0
 8000882:	db0a      	blt.n	800089a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	b2da      	uxtb	r2, r3
 8000888:	490c      	ldr	r1, [pc, #48]	@ (80008bc <__NVIC_SetPriority+0x4c>)
 800088a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800088e:	0112      	lsls	r2, r2, #4
 8000890:	b2d2      	uxtb	r2, r2
 8000892:	440b      	add	r3, r1
 8000894:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000898:	e00a      	b.n	80008b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	b2da      	uxtb	r2, r3
 800089e:	4908      	ldr	r1, [pc, #32]	@ (80008c0 <__NVIC_SetPriority+0x50>)
 80008a0:	79fb      	ldrb	r3, [r7, #7]
 80008a2:	f003 030f 	and.w	r3, r3, #15
 80008a6:	3b04      	subs	r3, #4
 80008a8:	0112      	lsls	r2, r2, #4
 80008aa:	b2d2      	uxtb	r2, r2
 80008ac:	440b      	add	r3, r1
 80008ae:	761a      	strb	r2, [r3, #24]
}
 80008b0:	bf00      	nop
 80008b2:	370c      	adds	r7, #12
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr
 80008bc:	e000e100 	.word	0xe000e100
 80008c0:	e000ed00 	.word	0xe000ed00

080008c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b089      	sub	sp, #36	@ 0x24
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	60f8      	str	r0, [r7, #12]
 80008cc:	60b9      	str	r1, [r7, #8]
 80008ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	f003 0307 	and.w	r3, r3, #7
 80008d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008d8:	69fb      	ldr	r3, [r7, #28]
 80008da:	f1c3 0307 	rsb	r3, r3, #7
 80008de:	2b04      	cmp	r3, #4
 80008e0:	bf28      	it	cs
 80008e2:	2304      	movcs	r3, #4
 80008e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008e6:	69fb      	ldr	r3, [r7, #28]
 80008e8:	3304      	adds	r3, #4
 80008ea:	2b06      	cmp	r3, #6
 80008ec:	d902      	bls.n	80008f4 <NVIC_EncodePriority+0x30>
 80008ee:	69fb      	ldr	r3, [r7, #28]
 80008f0:	3b03      	subs	r3, #3
 80008f2:	e000      	b.n	80008f6 <NVIC_EncodePriority+0x32>
 80008f4:	2300      	movs	r3, #0
 80008f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008f8:	f04f 32ff 	mov.w	r2, #4294967295
 80008fc:	69bb      	ldr	r3, [r7, #24]
 80008fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000902:	43da      	mvns	r2, r3
 8000904:	68bb      	ldr	r3, [r7, #8]
 8000906:	401a      	ands	r2, r3
 8000908:	697b      	ldr	r3, [r7, #20]
 800090a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800090c:	f04f 31ff 	mov.w	r1, #4294967295
 8000910:	697b      	ldr	r3, [r7, #20]
 8000912:	fa01 f303 	lsl.w	r3, r1, r3
 8000916:	43d9      	mvns	r1, r3
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800091c:	4313      	orrs	r3, r2
         );
}
 800091e:	4618      	mov	r0, r3
 8000920:	3724      	adds	r7, #36	@ 0x24
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr
	...

0800092c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	3b01      	subs	r3, #1
 8000938:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800093c:	d301      	bcc.n	8000942 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800093e:	2301      	movs	r3, #1
 8000940:	e00f      	b.n	8000962 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000942:	4a0a      	ldr	r2, [pc, #40]	@ (800096c <SysTick_Config+0x40>)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	3b01      	subs	r3, #1
 8000948:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800094a:	210f      	movs	r1, #15
 800094c:	f04f 30ff 	mov.w	r0, #4294967295
 8000950:	f7ff ff8e 	bl	8000870 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000954:	4b05      	ldr	r3, [pc, #20]	@ (800096c <SysTick_Config+0x40>)
 8000956:	2200      	movs	r2, #0
 8000958:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800095a:	4b04      	ldr	r3, [pc, #16]	@ (800096c <SysTick_Config+0x40>)
 800095c:	2207      	movs	r2, #7
 800095e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000960:	2300      	movs	r3, #0
}
 8000962:	4618      	mov	r0, r3
 8000964:	3708      	adds	r7, #8
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	e000e010 	.word	0xe000e010

08000970 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000978:	6878      	ldr	r0, [r7, #4]
 800097a:	f7ff ff29 	bl	80007d0 <__NVIC_SetPriorityGrouping>
}
 800097e:	bf00      	nop
 8000980:	3708      	adds	r7, #8
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}

08000986 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000986:	b580      	push	{r7, lr}
 8000988:	b086      	sub	sp, #24
 800098a:	af00      	add	r7, sp, #0
 800098c:	4603      	mov	r3, r0
 800098e:	60b9      	str	r1, [r7, #8]
 8000990:	607a      	str	r2, [r7, #4]
 8000992:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000994:	2300      	movs	r3, #0
 8000996:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000998:	f7ff ff3e 	bl	8000818 <__NVIC_GetPriorityGrouping>
 800099c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800099e:	687a      	ldr	r2, [r7, #4]
 80009a0:	68b9      	ldr	r1, [r7, #8]
 80009a2:	6978      	ldr	r0, [r7, #20]
 80009a4:	f7ff ff8e 	bl	80008c4 <NVIC_EncodePriority>
 80009a8:	4602      	mov	r2, r0
 80009aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009ae:	4611      	mov	r1, r2
 80009b0:	4618      	mov	r0, r3
 80009b2:	f7ff ff5d 	bl	8000870 <__NVIC_SetPriority>
}
 80009b6:	bf00      	nop
 80009b8:	3718      	adds	r7, #24
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}

080009be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009be:	b580      	push	{r7, lr}
 80009c0:	b082      	sub	sp, #8
 80009c2:	af00      	add	r7, sp, #0
 80009c4:	4603      	mov	r3, r0
 80009c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009cc:	4618      	mov	r0, r3
 80009ce:	f7ff ff31 	bl	8000834 <__NVIC_EnableIRQ>
}
 80009d2:	bf00      	nop
 80009d4:	3708      	adds	r7, #8
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}

080009da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009da:	b580      	push	{r7, lr}
 80009dc:	b082      	sub	sp, #8
 80009de:	af00      	add	r7, sp, #0
 80009e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009e2:	6878      	ldr	r0, [r7, #4]
 80009e4:	f7ff ffa2 	bl	800092c <SysTick_Config>
 80009e8:	4603      	mov	r3, r0
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	3708      	adds	r7, #8
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}

080009f2 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80009f2:	b580      	push	{r7, lr}
 80009f4:	b084      	sub	sp, #16
 80009f6:	af00      	add	r7, sp, #0
 80009f8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80009fa:	2300      	movs	r3, #0
 80009fc:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000a04:	2b02      	cmp	r3, #2
 8000a06:	d005      	beq.n	8000a14 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	2204      	movs	r2, #4
 8000a0c:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	73fb      	strb	r3, [r7, #15]
 8000a12:	e027      	b.n	8000a64 <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	681a      	ldr	r2, [r3, #0]
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	f022 020e 	bic.w	r2, r2, #14
 8000a22:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	681a      	ldr	r2, [r3, #0]
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	f022 0201 	bic.w	r2, r2, #1
 8000a32:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000a3c:	2101      	movs	r1, #1
 8000a3e:	fa01 f202 	lsl.w	r2, r1, r2
 8000a42:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	2201      	movs	r2, #1
 8000a48:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	2200      	movs	r2, #0
 8000a50:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d003      	beq.n	8000a64 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a60:	6878      	ldr	r0, [r7, #4]
 8000a62:	4798      	blx	r3
    }
  }
  return status;
 8000a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	3710      	adds	r7, #16
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}

08000a6e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000a6e:	b480      	push	{r7}
 8000a70:	b083      	sub	sp, #12
 8000a72:	af00      	add	r7, sp, #0
 8000a74:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	370c      	adds	r7, #12
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr

08000a88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b087      	sub	sp, #28
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
 8000a90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a92:	2300      	movs	r3, #0
 8000a94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a96:	e14e      	b.n	8000d36 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	681a      	ldr	r2, [r3, #0]
 8000a9c:	2101      	movs	r1, #1
 8000a9e:	697b      	ldr	r3, [r7, #20]
 8000aa0:	fa01 f303 	lsl.w	r3, r1, r3
 8000aa4:	4013      	ands	r3, r2
 8000aa6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	f000 8140 	beq.w	8000d30 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	685b      	ldr	r3, [r3, #4]
 8000ab4:	f003 0303 	and.w	r3, r3, #3
 8000ab8:	2b01      	cmp	r3, #1
 8000aba:	d005      	beq.n	8000ac8 <HAL_GPIO_Init+0x40>
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	685b      	ldr	r3, [r3, #4]
 8000ac0:	f003 0303 	and.w	r3, r3, #3
 8000ac4:	2b02      	cmp	r3, #2
 8000ac6:	d130      	bne.n	8000b2a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	689b      	ldr	r3, [r3, #8]
 8000acc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000ace:	697b      	ldr	r3, [r7, #20]
 8000ad0:	005b      	lsls	r3, r3, #1
 8000ad2:	2203      	movs	r2, #3
 8000ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad8:	43db      	mvns	r3, r3
 8000ada:	693a      	ldr	r2, [r7, #16]
 8000adc:	4013      	ands	r3, r2
 8000ade:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	68da      	ldr	r2, [r3, #12]
 8000ae4:	697b      	ldr	r3, [r7, #20]
 8000ae6:	005b      	lsls	r3, r3, #1
 8000ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8000aec:	693a      	ldr	r2, [r7, #16]
 8000aee:	4313      	orrs	r3, r2
 8000af0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	693a      	ldr	r2, [r7, #16]
 8000af6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000afe:	2201      	movs	r2, #1
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	fa02 f303 	lsl.w	r3, r2, r3
 8000b06:	43db      	mvns	r3, r3
 8000b08:	693a      	ldr	r2, [r7, #16]
 8000b0a:	4013      	ands	r3, r2
 8000b0c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	685b      	ldr	r3, [r3, #4]
 8000b12:	091b      	lsrs	r3, r3, #4
 8000b14:	f003 0201 	and.w	r2, r3, #1
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1e:	693a      	ldr	r2, [r7, #16]
 8000b20:	4313      	orrs	r3, r2
 8000b22:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	693a      	ldr	r2, [r7, #16]
 8000b28:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	685b      	ldr	r3, [r3, #4]
 8000b2e:	f003 0303 	and.w	r3, r3, #3
 8000b32:	2b03      	cmp	r3, #3
 8000b34:	d017      	beq.n	8000b66 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	68db      	ldr	r3, [r3, #12]
 8000b3a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	005b      	lsls	r3, r3, #1
 8000b40:	2203      	movs	r2, #3
 8000b42:	fa02 f303 	lsl.w	r3, r2, r3
 8000b46:	43db      	mvns	r3, r3
 8000b48:	693a      	ldr	r2, [r7, #16]
 8000b4a:	4013      	ands	r3, r2
 8000b4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	689a      	ldr	r2, [r3, #8]
 8000b52:	697b      	ldr	r3, [r7, #20]
 8000b54:	005b      	lsls	r3, r3, #1
 8000b56:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5a:	693a      	ldr	r2, [r7, #16]
 8000b5c:	4313      	orrs	r3, r2
 8000b5e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	693a      	ldr	r2, [r7, #16]
 8000b64:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	685b      	ldr	r3, [r3, #4]
 8000b6a:	f003 0303 	and.w	r3, r3, #3
 8000b6e:	2b02      	cmp	r3, #2
 8000b70:	d123      	bne.n	8000bba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b72:	697b      	ldr	r3, [r7, #20]
 8000b74:	08da      	lsrs	r2, r3, #3
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	3208      	adds	r2, #8
 8000b7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b7e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	f003 0307 	and.w	r3, r3, #7
 8000b86:	009b      	lsls	r3, r3, #2
 8000b88:	220f      	movs	r2, #15
 8000b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8e:	43db      	mvns	r3, r3
 8000b90:	693a      	ldr	r2, [r7, #16]
 8000b92:	4013      	ands	r3, r2
 8000b94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	691a      	ldr	r2, [r3, #16]
 8000b9a:	697b      	ldr	r3, [r7, #20]
 8000b9c:	f003 0307 	and.w	r3, r3, #7
 8000ba0:	009b      	lsls	r3, r3, #2
 8000ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba6:	693a      	ldr	r2, [r7, #16]
 8000ba8:	4313      	orrs	r3, r2
 8000baa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	08da      	lsrs	r2, r3, #3
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	3208      	adds	r2, #8
 8000bb4:	6939      	ldr	r1, [r7, #16]
 8000bb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	005b      	lsls	r3, r3, #1
 8000bc4:	2203      	movs	r2, #3
 8000bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bca:	43db      	mvns	r3, r3
 8000bcc:	693a      	ldr	r2, [r7, #16]
 8000bce:	4013      	ands	r3, r2
 8000bd0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	685b      	ldr	r3, [r3, #4]
 8000bd6:	f003 0203 	and.w	r2, r3, #3
 8000bda:	697b      	ldr	r3, [r7, #20]
 8000bdc:	005b      	lsls	r3, r3, #1
 8000bde:	fa02 f303 	lsl.w	r3, r2, r3
 8000be2:	693a      	ldr	r2, [r7, #16]
 8000be4:	4313      	orrs	r3, r2
 8000be6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	693a      	ldr	r2, [r7, #16]
 8000bec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	685b      	ldr	r3, [r3, #4]
 8000bf2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	f000 809a 	beq.w	8000d30 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bfc:	4b55      	ldr	r3, [pc, #340]	@ (8000d54 <HAL_GPIO_Init+0x2cc>)
 8000bfe:	699b      	ldr	r3, [r3, #24]
 8000c00:	4a54      	ldr	r2, [pc, #336]	@ (8000d54 <HAL_GPIO_Init+0x2cc>)
 8000c02:	f043 0301 	orr.w	r3, r3, #1
 8000c06:	6193      	str	r3, [r2, #24]
 8000c08:	4b52      	ldr	r3, [pc, #328]	@ (8000d54 <HAL_GPIO_Init+0x2cc>)
 8000c0a:	699b      	ldr	r3, [r3, #24]
 8000c0c:	f003 0301 	and.w	r3, r3, #1
 8000c10:	60bb      	str	r3, [r7, #8]
 8000c12:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c14:	4a50      	ldr	r2, [pc, #320]	@ (8000d58 <HAL_GPIO_Init+0x2d0>)
 8000c16:	697b      	ldr	r3, [r7, #20]
 8000c18:	089b      	lsrs	r3, r3, #2
 8000c1a:	3302      	adds	r3, #2
 8000c1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c20:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	f003 0303 	and.w	r3, r3, #3
 8000c28:	009b      	lsls	r3, r3, #2
 8000c2a:	220f      	movs	r2, #15
 8000c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c30:	43db      	mvns	r3, r3
 8000c32:	693a      	ldr	r2, [r7, #16]
 8000c34:	4013      	ands	r3, r2
 8000c36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000c3e:	d013      	beq.n	8000c68 <HAL_GPIO_Init+0x1e0>
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	4a46      	ldr	r2, [pc, #280]	@ (8000d5c <HAL_GPIO_Init+0x2d4>)
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d00d      	beq.n	8000c64 <HAL_GPIO_Init+0x1dc>
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	4a45      	ldr	r2, [pc, #276]	@ (8000d60 <HAL_GPIO_Init+0x2d8>)
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	d007      	beq.n	8000c60 <HAL_GPIO_Init+0x1d8>
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	4a44      	ldr	r2, [pc, #272]	@ (8000d64 <HAL_GPIO_Init+0x2dc>)
 8000c54:	4293      	cmp	r3, r2
 8000c56:	d101      	bne.n	8000c5c <HAL_GPIO_Init+0x1d4>
 8000c58:	2303      	movs	r3, #3
 8000c5a:	e006      	b.n	8000c6a <HAL_GPIO_Init+0x1e2>
 8000c5c:	2305      	movs	r3, #5
 8000c5e:	e004      	b.n	8000c6a <HAL_GPIO_Init+0x1e2>
 8000c60:	2302      	movs	r3, #2
 8000c62:	e002      	b.n	8000c6a <HAL_GPIO_Init+0x1e2>
 8000c64:	2301      	movs	r3, #1
 8000c66:	e000      	b.n	8000c6a <HAL_GPIO_Init+0x1e2>
 8000c68:	2300      	movs	r3, #0
 8000c6a:	697a      	ldr	r2, [r7, #20]
 8000c6c:	f002 0203 	and.w	r2, r2, #3
 8000c70:	0092      	lsls	r2, r2, #2
 8000c72:	4093      	lsls	r3, r2
 8000c74:	693a      	ldr	r2, [r7, #16]
 8000c76:	4313      	orrs	r3, r2
 8000c78:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c7a:	4937      	ldr	r1, [pc, #220]	@ (8000d58 <HAL_GPIO_Init+0x2d0>)
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	089b      	lsrs	r3, r3, #2
 8000c80:	3302      	adds	r3, #2
 8000c82:	693a      	ldr	r2, [r7, #16]
 8000c84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c88:	4b37      	ldr	r3, [pc, #220]	@ (8000d68 <HAL_GPIO_Init+0x2e0>)
 8000c8a:	689b      	ldr	r3, [r3, #8]
 8000c8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	43db      	mvns	r3, r3
 8000c92:	693a      	ldr	r2, [r7, #16]
 8000c94:	4013      	ands	r3, r2
 8000c96:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d003      	beq.n	8000cac <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000ca4:	693a      	ldr	r2, [r7, #16]
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000cac:	4a2e      	ldr	r2, [pc, #184]	@ (8000d68 <HAL_GPIO_Init+0x2e0>)
 8000cae:	693b      	ldr	r3, [r7, #16]
 8000cb0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000cb2:	4b2d      	ldr	r3, [pc, #180]	@ (8000d68 <HAL_GPIO_Init+0x2e0>)
 8000cb4:	68db      	ldr	r3, [r3, #12]
 8000cb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	43db      	mvns	r3, r3
 8000cbc:	693a      	ldr	r2, [r7, #16]
 8000cbe:	4013      	ands	r3, r2
 8000cc0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d003      	beq.n	8000cd6 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000cce:	693a      	ldr	r2, [r7, #16]
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000cd6:	4a24      	ldr	r2, [pc, #144]	@ (8000d68 <HAL_GPIO_Init+0x2e0>)
 8000cd8:	693b      	ldr	r3, [r7, #16]
 8000cda:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000cdc:	4b22      	ldr	r3, [pc, #136]	@ (8000d68 <HAL_GPIO_Init+0x2e0>)
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	43db      	mvns	r3, r3
 8000ce6:	693a      	ldr	r2, [r7, #16]
 8000ce8:	4013      	ands	r3, r2
 8000cea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d003      	beq.n	8000d00 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000cf8:	693a      	ldr	r2, [r7, #16]
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000d00:	4a19      	ldr	r2, [pc, #100]	@ (8000d68 <HAL_GPIO_Init+0x2e0>)
 8000d02:	693b      	ldr	r3, [r7, #16]
 8000d04:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d06:	4b18      	ldr	r3, [pc, #96]	@ (8000d68 <HAL_GPIO_Init+0x2e0>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	43db      	mvns	r3, r3
 8000d10:	693a      	ldr	r2, [r7, #16]
 8000d12:	4013      	ands	r3, r2
 8000d14:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d003      	beq.n	8000d2a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000d22:	693a      	ldr	r2, [r7, #16]
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	4313      	orrs	r3, r2
 8000d28:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000d2a:	4a0f      	ldr	r2, [pc, #60]	@ (8000d68 <HAL_GPIO_Init+0x2e0>)
 8000d2c:	693b      	ldr	r3, [r7, #16]
 8000d2e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	3301      	adds	r3, #1
 8000d34:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	681a      	ldr	r2, [r3, #0]
 8000d3a:	697b      	ldr	r3, [r7, #20]
 8000d3c:	fa22 f303 	lsr.w	r3, r2, r3
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	f47f aea9 	bne.w	8000a98 <HAL_GPIO_Init+0x10>
  }
}
 8000d46:	bf00      	nop
 8000d48:	bf00      	nop
 8000d4a:	371c      	adds	r7, #28
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr
 8000d54:	40021000 	.word	0x40021000
 8000d58:	40010000 	.word	0x40010000
 8000d5c:	48000400 	.word	0x48000400
 8000d60:	48000800 	.word	0x48000800
 8000d64:	48000c00 	.word	0x48000c00
 8000d68:	40010400 	.word	0x40010400

08000d6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
 8000d74:	460b      	mov	r3, r1
 8000d76:	807b      	strh	r3, [r7, #2]
 8000d78:	4613      	mov	r3, r2
 8000d7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d7c:	787b      	ldrb	r3, [r7, #1]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d003      	beq.n	8000d8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d82:	887a      	ldrh	r2, [r7, #2]
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d88:	e002      	b.n	8000d90 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d8a:	887a      	ldrh	r2, [r7, #2]
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000d90:	bf00      	nop
 8000d92:	370c      	adds	r7, #12
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr

08000d9c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d101      	bne.n	8000dae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000daa:	2301      	movs	r3, #1
 8000dac:	e08d      	b.n	8000eca <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000db4:	b2db      	uxtb	r3, r3
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d106      	bne.n	8000dc8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000dc2:	6878      	ldr	r0, [r7, #4]
 8000dc4:	f7ff fa88 	bl	80002d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	2224      	movs	r2, #36	@ 0x24
 8000dcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f022 0201 	bic.w	r2, r2, #1
 8000dde:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	685a      	ldr	r2, [r3, #4]
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8000dec:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	689a      	ldr	r2, [r3, #8]
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000dfc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	68db      	ldr	r3, [r3, #12]
 8000e02:	2b01      	cmp	r3, #1
 8000e04:	d107      	bne.n	8000e16 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	689a      	ldr	r2, [r3, #8]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000e12:	609a      	str	r2, [r3, #8]
 8000e14:	e006      	b.n	8000e24 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	689a      	ldr	r2, [r3, #8]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8000e22:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	68db      	ldr	r3, [r3, #12]
 8000e28:	2b02      	cmp	r3, #2
 8000e2a:	d108      	bne.n	8000e3e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	685a      	ldr	r2, [r3, #4]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8000e3a:	605a      	str	r2, [r3, #4]
 8000e3c:	e007      	b.n	8000e4e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	685a      	ldr	r2, [r3, #4]
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000e4c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	687a      	ldr	r2, [r7, #4]
 8000e56:	6812      	ldr	r2, [r2, #0]
 8000e58:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000e5c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000e60:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	68da      	ldr	r2, [r3, #12]
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000e70:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	691a      	ldr	r2, [r3, #16]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	695b      	ldr	r3, [r3, #20]
 8000e7a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	699b      	ldr	r3, [r3, #24]
 8000e82:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	430a      	orrs	r2, r1
 8000e8a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	69d9      	ldr	r1, [r3, #28]
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6a1a      	ldr	r2, [r3, #32]
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	430a      	orrs	r2, r1
 8000e9a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f042 0201 	orr.w	r2, r2, #1
 8000eaa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2200      	movs	r2, #0
 8000eb0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2220      	movs	r2, #32
 8000eb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8000ec8:	2300      	movs	r3, #0
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
	...

08000ed4 <HAL_I2C_Master_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b088      	sub	sp, #32
 8000ed8:	af02      	add	r7, sp, #8
 8000eda:	60f8      	str	r0, [r7, #12]
 8000edc:	607a      	str	r2, [r7, #4]
 8000ede:	461a      	mov	r2, r3
 8000ee0:	460b      	mov	r3, r1
 8000ee2:	817b      	strh	r3, [r7, #10]
 8000ee4:	4613      	mov	r3, r2
 8000ee6:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000eee:	b2db      	uxtb	r3, r3
 8000ef0:	2b20      	cmp	r3, #32
 8000ef2:	d17c      	bne.n	8000fee <HAL_I2C_Master_Transmit_IT+0x11a>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	699b      	ldr	r3, [r3, #24]
 8000efa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000efe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000f02:	d101      	bne.n	8000f08 <HAL_I2C_Master_Transmit_IT+0x34>
    {
      return HAL_BUSY;
 8000f04:	2302      	movs	r3, #2
 8000f06:	e073      	b.n	8000ff0 <HAL_I2C_Master_Transmit_IT+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000f0e:	2b01      	cmp	r3, #1
 8000f10:	d101      	bne.n	8000f16 <HAL_I2C_Master_Transmit_IT+0x42>
 8000f12:	2302      	movs	r3, #2
 8000f14:	e06c      	b.n	8000ff0 <HAL_I2C_Master_Transmit_IT+0x11c>
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	2201      	movs	r2, #1
 8000f1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	2221      	movs	r2, #33	@ 0x21
 8000f22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	2210      	movs	r2, #16
 8000f2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	2200      	movs	r2, #0
 8000f32:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	687a      	ldr	r2, [r7, #4]
 8000f38:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	893a      	ldrh	r2, [r7, #8]
 8000f3e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	4a2d      	ldr	r2, [pc, #180]	@ (8000ff8 <HAL_I2C_Master_Transmit_IT+0x124>)
 8000f44:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	4a2c      	ldr	r2, [pc, #176]	@ (8000ffc <HAL_I2C_Master_Transmit_IT+0x128>)
 8000f4a:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000f50:	b29b      	uxth	r3, r3
 8000f52:	2bff      	cmp	r3, #255	@ 0xff
 8000f54:	d906      	bls.n	8000f64 <HAL_I2C_Master_Transmit_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	22ff      	movs	r2, #255	@ 0xff
 8000f5a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8000f5c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000f60:	617b      	str	r3, [r7, #20]
 8000f62:	e007      	b.n	8000f74 <HAL_I2C_Master_Transmit_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000f68:	b29a      	uxth	r2, r3
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8000f6e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000f72:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferSize > 0U)
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d024      	beq.n	8000fc6 <HAL_I2C_Master_Transmit_IT+0xf2>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f80:	781a      	ldrb	r2, [r3, #0]
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f8c:	1c5a      	adds	r2, r3, #1
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000f96:	b29b      	uxth	r3, r3
 8000f98:	3b01      	subs	r3, #1
 8000f9a:	b29a      	uxth	r2, r3
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000fa4:	3b01      	subs	r3, #1
 8000fa6:	b29a      	uxth	r2, r3
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	851a      	strh	r2, [r3, #40]	@ 0x28

      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	b2da      	uxtb	r2, r3
 8000fb6:	8979      	ldrh	r1, [r7, #10]
 8000fb8:	4b11      	ldr	r3, [pc, #68]	@ (8001000 <HAL_I2C_Master_Transmit_IT+0x12c>)
 8000fba:	9300      	str	r3, [sp, #0]
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	68f8      	ldr	r0, [r7, #12]
 8000fc0:	f001 fb92 	bl	80026e8 <I2C_TransferConfig>
 8000fc4:	e009      	b.n	8000fda <HAL_I2C_Master_Transmit_IT+0x106>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000fca:	b2da      	uxtb	r2, r3
 8000fcc:	8979      	ldrh	r1, [r7, #10]
 8000fce:	4b0c      	ldr	r3, [pc, #48]	@ (8001000 <HAL_I2C_Master_Transmit_IT+0x12c>)
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	68f8      	ldr	r0, [r7, #12]
 8000fd6:	f001 fb87 	bl	80026e8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8000fe2:	2101      	movs	r1, #1
 8000fe4:	68f8      	ldr	r0, [r7, #12]
 8000fe6:	f001 fbb1 	bl	800274c <I2C_Enable_IRQ>

    return HAL_OK;
 8000fea:	2300      	movs	r3, #0
 8000fec:	e000      	b.n	8000ff0 <HAL_I2C_Master_Transmit_IT+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8000fee:	2302      	movs	r3, #2
  }
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	3718      	adds	r7, #24
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	ffff0000 	.word	0xffff0000
 8000ffc:	08001277 	.word	0x08001277
 8001000:	80002000 	.word	0x80002000

08001004 <HAL_I2C_Master_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                            uint16_t Size)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b088      	sub	sp, #32
 8001008:	af02      	add	r7, sp, #8
 800100a:	60f8      	str	r0, [r7, #12]
 800100c:	607a      	str	r2, [r7, #4]
 800100e:	461a      	mov	r2, r3
 8001010:	460b      	mov	r3, r1
 8001012:	817b      	strh	r3, [r7, #10]
 8001014:	4613      	mov	r3, r2
 8001016:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800101e:	b2db      	uxtb	r3, r3
 8001020:	2b20      	cmp	r3, #32
 8001022:	d153      	bne.n	80010cc <HAL_I2C_Master_Receive_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	699b      	ldr	r3, [r3, #24]
 800102a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800102e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001032:	d101      	bne.n	8001038 <HAL_I2C_Master_Receive_IT+0x34>
    {
      return HAL_BUSY;
 8001034:	2302      	movs	r3, #2
 8001036:	e04a      	b.n	80010ce <HAL_I2C_Master_Receive_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800103e:	2b01      	cmp	r3, #1
 8001040:	d101      	bne.n	8001046 <HAL_I2C_Master_Receive_IT+0x42>
 8001042:	2302      	movs	r3, #2
 8001044:	e043      	b.n	80010ce <HAL_I2C_Master_Receive_IT+0xca>
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	2201      	movs	r2, #1
 800104a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	2222      	movs	r2, #34	@ 0x22
 8001052:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	2210      	movs	r2, #16
 800105a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	2200      	movs	r2, #0
 8001062:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	687a      	ldr	r2, [r7, #4]
 8001068:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	893a      	ldrh	r2, [r7, #8]
 800106e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	4a19      	ldr	r2, [pc, #100]	@ (80010d8 <HAL_I2C_Master_Receive_IT+0xd4>)
 8001074:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	4a18      	ldr	r2, [pc, #96]	@ (80010dc <HAL_I2C_Master_Receive_IT+0xd8>)
 800107a:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001080:	b29b      	uxth	r3, r3
 8001082:	2bff      	cmp	r3, #255	@ 0xff
 8001084:	d906      	bls.n	8001094 <HAL_I2C_Master_Receive_IT+0x90>
    {
      hi2c->XferSize = 1U;
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	2201      	movs	r2, #1
 800108a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800108c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001090:	617b      	str	r3, [r7, #20]
 8001092:	e007      	b.n	80010a4 <HAL_I2C_Master_Receive_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001098:	b29a      	uxth	r2, r3
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800109e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80010a2:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80010a8:	b2da      	uxtb	r2, r3
 80010aa:	8979      	ldrh	r1, [r7, #10]
 80010ac:	4b0c      	ldr	r3, [pc, #48]	@ (80010e0 <HAL_I2C_Master_Receive_IT+0xdc>)
 80010ae:	9300      	str	r3, [sp, #0]
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	68f8      	ldr	r0, [r7, #12]
 80010b4:	f001 fb18 	bl	80026e8 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	2200      	movs	r2, #0
 80010bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 80010c0:	2102      	movs	r1, #2
 80010c2:	68f8      	ldr	r0, [r7, #12]
 80010c4:	f001 fb42 	bl	800274c <I2C_Enable_IRQ>

    return HAL_OK;
 80010c8:	2300      	movs	r3, #0
 80010ca:	e000      	b.n	80010ce <HAL_I2C_Master_Receive_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 80010cc:	2302      	movs	r3, #2
  }
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3718      	adds	r7, #24
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	ffff0000 	.word	0xffff0000
 80010dc:	08001277 	.word	0x08001277
 80010e0:	80002400 	.word	0x80002400

080010e4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b084      	sub	sp, #16
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	699b      	ldr	r3, [r3, #24]
 80010f2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001100:	2b00      	cmp	r3, #0
 8001102:	d005      	beq.n	8001110 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001108:	68ba      	ldr	r2, [r7, #8]
 800110a:	68f9      	ldr	r1, [r7, #12]
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	4798      	blx	r3
  }
}
 8001110:	bf00      	nop
 8001112:	3710      	adds	r7, #16
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}

08001118 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b086      	sub	sp, #24
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	699b      	ldr	r3, [r3, #24]
 8001126:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001136:	2b00      	cmp	r3, #0
 8001138:	d00f      	beq.n	800115a <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001140:	2b00      	cmp	r3, #0
 8001142:	d00a      	beq.n	800115a <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001148:	f043 0201 	orr.w	r2, r3, #1
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001158:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001160:	2b00      	cmp	r3, #0
 8001162:	d00f      	beq.n	8001184 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800116a:	2b00      	cmp	r3, #0
 800116c:	d00a      	beq.n	8001184 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001172:	f043 0208 	orr.w	r2, r3, #8
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001182:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800118a:	2b00      	cmp	r3, #0
 800118c:	d00f      	beq.n	80011ae <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001194:	2b00      	cmp	r3, #0
 8001196:	d00a      	beq.n	80011ae <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800119c:	f043 0202 	orr.w	r2, r3, #2
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011ac:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011b2:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	f003 030b 	and.w	r3, r3, #11
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d003      	beq.n	80011c6 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 80011be:	68f9      	ldr	r1, [r7, #12]
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f001 f937 	bl	8002434 <I2C_ITError>
  }
}
 80011c6:	bf00      	nop
 80011c8:	3718      	adds	r7, #24
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}

080011ce <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80011ce:	b480      	push	{r7}
 80011d0:	b083      	sub	sp, #12
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80011d6:	bf00      	nop
 80011d8:	370c      	adds	r7, #12
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr

080011e2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80011e2:	b480      	push	{r7}
 80011e4:	b083      	sub	sp, #12
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80011ea:	bf00      	nop
 80011ec:	370c      	adds	r7, #12
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr

080011f6 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80011f6:	b480      	push	{r7}
 80011f8:	b083      	sub	sp, #12
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	6078      	str	r0, [r7, #4]
 80011fe:	460b      	mov	r3, r1
 8001200:	70fb      	strb	r3, [r7, #3]
 8001202:	4613      	mov	r3, r2
 8001204:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001206:	bf00      	nop
 8001208:	370c      	adds	r7, #12
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr

08001212 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001212:	b480      	push	{r7}
 8001214:	b083      	sub	sp, #12
 8001216:	af00      	add	r7, sp, #0
 8001218:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800121a:	bf00      	nop
 800121c:	370c      	adds	r7, #12
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr

08001226 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001226:	b480      	push	{r7}
 8001228:	b083      	sub	sp, #12
 800122a:	af00      	add	r7, sp, #0
 800122c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800122e:	bf00      	nop
 8001230:	370c      	adds	r7, #12
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr

0800123a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800123a:	b480      	push	{r7}
 800123c:	b083      	sub	sp, #12
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001242:	bf00      	nop
 8001244:	370c      	adds	r7, #12
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr

0800124e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800124e:	b480      	push	{r7}
 8001250:	b083      	sub	sp, #12
 8001252:	af00      	add	r7, sp, #0
 8001254:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001256:	bf00      	nop
 8001258:	370c      	adds	r7, #12
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr

08001262 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001262:	b480      	push	{r7}
 8001264:	b083      	sub	sp, #12
 8001266:	af00      	add	r7, sp, #0
 8001268:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800126a:	bf00      	nop
 800126c:	370c      	adds	r7, #12
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr

08001276 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	b088      	sub	sp, #32
 800127a:	af02      	add	r7, sp, #8
 800127c:	60f8      	str	r0, [r7, #12]
 800127e:	60b9      	str	r1, [r7, #8]
 8001280:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8001282:	68bb      	ldr	r3, [r7, #8]
 8001284:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800128c:	2b01      	cmp	r3, #1
 800128e:	d101      	bne.n	8001294 <I2C_Master_ISR_IT+0x1e>
 8001290:	2302      	movs	r3, #2
 8001292:	e121      	b.n	80014d8 <I2C_Master_ISR_IT+0x262>
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	2201      	movs	r2, #1
 8001298:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	f003 0310 	and.w	r3, r3, #16
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d012      	beq.n	80012cc <I2C_Master_ISR_IT+0x56>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d00d      	beq.n	80012cc <I2C_Master_ISR_IT+0x56>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	2210      	movs	r2, #16
 80012b6:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012bc:	f043 0204 	orr.w	r2, r3, #4
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80012c4:	68f8      	ldr	r0, [r7, #12]
 80012c6:	f001 f9cc 	bl	8002662 <I2C_Flush_TXDR>
 80012ca:	e0f2      	b.n	80014b2 <I2C_Master_ISR_IT+0x23c>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	f003 0304 	and.w	r3, r3, #4
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d022      	beq.n	800131c <I2C_Master_ISR_IT+0xa6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d01d      	beq.n	800131c <I2C_Master_ISR_IT+0xa6>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	f023 0304 	bic.w	r3, r3, #4
 80012e6:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012f2:	b2d2      	uxtb	r2, r2
 80012f4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012fa:	1c5a      	adds	r2, r3, #1
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001304:	3b01      	subs	r3, #1
 8001306:	b29a      	uxth	r2, r3
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001310:	b29b      	uxth	r3, r3
 8001312:	3b01      	subs	r3, #1
 8001314:	b29a      	uxth	r2, r3
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800131a:	e0ca      	b.n	80014b2 <I2C_Master_ISR_IT+0x23c>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001322:	2b00      	cmp	r3, #0
 8001324:	d128      	bne.n	8001378 <I2C_Master_ISR_IT+0x102>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 800132c:	2b00      	cmp	r3, #0
 800132e:	d023      	beq.n	8001378 <I2C_Master_ISR_IT+0x102>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	f003 0302 	and.w	r3, r3, #2
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001336:	2b00      	cmp	r3, #0
 8001338:	d01e      	beq.n	8001378 <I2C_Master_ISR_IT+0x102>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800133e:	b29b      	uxth	r3, r3
 8001340:	2b00      	cmp	r3, #0
 8001342:	f000 80b6 	beq.w	80014b2 <I2C_Master_ISR_IT+0x23c>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800134a:	781a      	ldrb	r2, [r3, #0]
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001356:	1c5a      	adds	r2, r3, #1
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001360:	3b01      	subs	r3, #1
 8001362:	b29a      	uxth	r2, r3
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800136c:	b29b      	uxth	r3, r3
 800136e:	3b01      	subs	r3, #1
 8001370:	b29a      	uxth	r2, r3
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 8001376:	e09c      	b.n	80014b2 <I2C_Master_ISR_IT+0x23c>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800137e:	2b00      	cmp	r3, #0
 8001380:	d06a      	beq.n	8001458 <I2C_Master_ISR_IT+0x1e2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8001388:	2b00      	cmp	r3, #0
 800138a:	d065      	beq.n	8001458 <I2C_Master_ISR_IT+0x1e2>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001390:	b29b      	uxth	r3, r3
 8001392:	2b00      	cmp	r3, #0
 8001394:	d04e      	beq.n	8001434 <I2C_Master_ISR_IT+0x1be>
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800139a:	2b00      	cmp	r3, #0
 800139c:	d14a      	bne.n	8001434 <I2C_Master_ISR_IT+0x1be>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	b29b      	uxth	r3, r3
 80013a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80013aa:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80013b0:	b29b      	uxth	r3, r3
 80013b2:	2bff      	cmp	r3, #255	@ 0xff
 80013b4:	d91c      	bls.n	80013f0 <I2C_Master_ISR_IT+0x17a>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	699b      	ldr	r3, [r3, #24]
 80013bc:	0c1b      	lsrs	r3, r3, #16
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	f003 0301 	and.w	r3, r3, #1
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d103      	bne.n	80013d2 <I2C_Master_ISR_IT+0x15c>
        {
          hi2c->XferSize = 1U;
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	2201      	movs	r2, #1
 80013ce:	851a      	strh	r2, [r3, #40]	@ 0x28
 80013d0:	e002      	b.n	80013d8 <I2C_Master_ISR_IT+0x162>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	22ff      	movs	r2, #255	@ 0xff
 80013d6:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80013dc:	b2da      	uxtb	r2, r3
 80013de:	8a79      	ldrh	r1, [r7, #18]
 80013e0:	2300      	movs	r3, #0
 80013e2:	9300      	str	r3, [sp, #0]
 80013e4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80013e8:	68f8      	ldr	r0, [r7, #12]
 80013ea:	f001 f97d 	bl	80026e8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80013ee:	e032      	b.n	8001456 <I2C_Master_ISR_IT+0x1e0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80013f4:	b29a      	uxth	r2, r3
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013fe:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001402:	d00b      	beq.n	800141c <I2C_Master_ISR_IT+0x1a6>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001408:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800140e:	8a79      	ldrh	r1, [r7, #18]
 8001410:	2000      	movs	r0, #0
 8001412:	9000      	str	r0, [sp, #0]
 8001414:	68f8      	ldr	r0, [r7, #12]
 8001416:	f001 f967 	bl	80026e8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800141a:	e01c      	b.n	8001456 <I2C_Master_ISR_IT+0x1e0>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001420:	b2da      	uxtb	r2, r3
 8001422:	8a79      	ldrh	r1, [r7, #18]
 8001424:	2300      	movs	r3, #0
 8001426:	9300      	str	r3, [sp, #0]
 8001428:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800142c:	68f8      	ldr	r0, [r7, #12]
 800142e:	f001 f95b 	bl	80026e8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001432:	e010      	b.n	8001456 <I2C_Master_ISR_IT+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800143e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001442:	d003      	beq.n	800144c <I2C_Master_ISR_IT+0x1d6>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8001444:	68f8      	ldr	r0, [r7, #12]
 8001446:	f000 fcdc 	bl	8001e02 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800144a:	e032      	b.n	80014b2 <I2C_Master_ISR_IT+0x23c>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800144c:	2140      	movs	r1, #64	@ 0x40
 800144e:	68f8      	ldr	r0, [r7, #12]
 8001450:	f000 fff0 	bl	8002434 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001454:	e02d      	b.n	80014b2 <I2C_Master_ISR_IT+0x23c>
 8001456:	e02c      	b.n	80014b2 <I2C_Master_ISR_IT+0x23c>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800145e:	2b00      	cmp	r3, #0
 8001460:	d027      	beq.n	80014b2 <I2C_Master_ISR_IT+0x23c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8001468:	2b00      	cmp	r3, #0
 800146a:	d022      	beq.n	80014b2 <I2C_Master_ISR_IT+0x23c>
  {
    if (hi2c->XferCount == 0U)
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001470:	b29b      	uxth	r3, r3
 8001472:	2b00      	cmp	r3, #0
 8001474:	d119      	bne.n	80014aa <I2C_Master_ISR_IT+0x234>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001480:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001484:	d015      	beq.n	80014b2 <I2C_Master_ISR_IT+0x23c>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800148a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800148e:	d108      	bne.n	80014a2 <I2C_Master_ISR_IT+0x22c>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	685a      	ldr	r2, [r3, #4]
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800149e:	605a      	str	r2, [r3, #4]
 80014a0:	e007      	b.n	80014b2 <I2C_Master_ISR_IT+0x23c>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80014a2:	68f8      	ldr	r0, [r7, #12]
 80014a4:	f000 fcad 	bl	8001e02 <I2C_ITMasterSeqCplt>
 80014a8:	e003      	b.n	80014b2 <I2C_Master_ISR_IT+0x23c>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80014aa:	2140      	movs	r1, #64	@ 0x40
 80014ac:	68f8      	ldr	r0, [r7, #12]
 80014ae:	f000 ffc1 	bl	8002434 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	f003 0320 	and.w	r3, r3, #32
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d008      	beq.n	80014ce <I2C_Master_ISR_IT+0x258>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d003      	beq.n	80014ce <I2C_Master_ISR_IT+0x258>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 80014c6:	6979      	ldr	r1, [r7, #20]
 80014c8:	68f8      	ldr	r0, [r7, #12]
 80014ca:	f000 fd33 	bl	8001f34 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	2200      	movs	r2, #0
 80014d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80014d6:	2300      	movs	r3, #0
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3718      	adds	r7, #24
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}

080014e0 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b086      	sub	sp, #24
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	60f8      	str	r0, [r7, #12]
 80014e8:	60b9      	str	r1, [r7, #8]
 80014ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014f0:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80014f2:	68bb      	ldr	r3, [r7, #8]
 80014f4:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d101      	bne.n	8001504 <I2C_Slave_ISR_IT+0x24>
 8001500:	2302      	movs	r3, #2
 8001502:	e0e2      	b.n	80016ca <I2C_Slave_ISR_IT+0x1ea>
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	2201      	movs	r2, #1
 8001508:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	f003 0320 	and.w	r3, r3, #32
 8001512:	2b00      	cmp	r3, #0
 8001514:	d009      	beq.n	800152a <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800151c:	2b00      	cmp	r3, #0
 800151e:	d004      	beq.n	800152a <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8001520:	6939      	ldr	r1, [r7, #16]
 8001522:	68f8      	ldr	r0, [r7, #12]
 8001524:	f000 fdce 	bl	80020c4 <I2C_ITSlaveCplt>
 8001528:	e0ca      	b.n	80016c0 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	f003 0310 	and.w	r3, r3, #16
 8001530:	2b00      	cmp	r3, #0
 8001532:	d04b      	beq.n	80015cc <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800153a:	2b00      	cmp	r3, #0
 800153c:	d046      	beq.n	80015cc <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001542:	b29b      	uxth	r3, r3
 8001544:	2b00      	cmp	r3, #0
 8001546:	d128      	bne.n	800159a <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800154e:	b2db      	uxtb	r3, r3
 8001550:	2b28      	cmp	r3, #40	@ 0x28
 8001552:	d108      	bne.n	8001566 <I2C_Slave_ISR_IT+0x86>
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800155a:	d104      	bne.n	8001566 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800155c:	6939      	ldr	r1, [r7, #16]
 800155e:	68f8      	ldr	r0, [r7, #12]
 8001560:	f000 ff14 	bl	800238c <I2C_ITListenCplt>
 8001564:	e031      	b.n	80015ca <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800156c:	b2db      	uxtb	r3, r3
 800156e:	2b29      	cmp	r3, #41	@ 0x29
 8001570:	d10e      	bne.n	8001590 <I2C_Slave_ISR_IT+0xb0>
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001578:	d00a      	beq.n	8001590 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	2210      	movs	r2, #16
 8001580:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8001582:	68f8      	ldr	r0, [r7, #12]
 8001584:	f001 f86d 	bl	8002662 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001588:	68f8      	ldr	r0, [r7, #12]
 800158a:	f000 fc77 	bl	8001e7c <I2C_ITSlaveSeqCplt>
 800158e:	e01c      	b.n	80015ca <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	2210      	movs	r2, #16
 8001596:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8001598:	e08f      	b.n	80016ba <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	2210      	movs	r2, #16
 80015a0:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015a6:	f043 0204 	orr.w	r2, r3, #4
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d003      	beq.n	80015bc <I2C_Slave_ISR_IT+0xdc>
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80015ba:	d17e      	bne.n	80016ba <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015c0:	4619      	mov	r1, r3
 80015c2:	68f8      	ldr	r0, [r7, #12]
 80015c4:	f000 ff36 	bl	8002434 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80015c8:	e077      	b.n	80016ba <I2C_Slave_ISR_IT+0x1da>
 80015ca:	e076      	b.n	80016ba <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	f003 0304 	and.w	r3, r3, #4
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d02f      	beq.n	8001636 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d02a      	beq.n	8001636 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015e4:	b29b      	uxth	r3, r3
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d018      	beq.n	800161c <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015f4:	b2d2      	uxtb	r2, r2
 80015f6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015fc:	1c5a      	adds	r2, r3, #1
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001606:	3b01      	subs	r3, #1
 8001608:	b29a      	uxth	r2, r3
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001612:	b29b      	uxth	r3, r3
 8001614:	3b01      	subs	r3, #1
 8001616:	b29a      	uxth	r2, r3
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001620:	b29b      	uxth	r3, r3
 8001622:	2b00      	cmp	r3, #0
 8001624:	d14b      	bne.n	80016be <I2C_Slave_ISR_IT+0x1de>
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800162c:	d047      	beq.n	80016be <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800162e:	68f8      	ldr	r0, [r7, #12]
 8001630:	f000 fc24 	bl	8001e7c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8001634:	e043      	b.n	80016be <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	f003 0308 	and.w	r3, r3, #8
 800163c:	2b00      	cmp	r3, #0
 800163e:	d009      	beq.n	8001654 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001646:	2b00      	cmp	r3, #0
 8001648:	d004      	beq.n	8001654 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800164a:	6939      	ldr	r1, [r7, #16]
 800164c:	68f8      	ldr	r0, [r7, #12]
 800164e:	f000 fb54 	bl	8001cfa <I2C_ITAddrCplt>
 8001652:	e035      	b.n	80016c0 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	f003 0302 	and.w	r3, r3, #2
 800165a:	2b00      	cmp	r3, #0
 800165c:	d030      	beq.n	80016c0 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001664:	2b00      	cmp	r3, #0
 8001666:	d02b      	beq.n	80016c0 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800166c:	b29b      	uxth	r3, r3
 800166e:	2b00      	cmp	r3, #0
 8001670:	d018      	beq.n	80016a4 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001676:	781a      	ldrb	r2, [r3, #0]
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001682:	1c5a      	adds	r2, r3, #1
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800168c:	b29b      	uxth	r3, r3
 800168e:	3b01      	subs	r3, #1
 8001690:	b29a      	uxth	r2, r3
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800169a:	3b01      	subs	r3, #1
 800169c:	b29a      	uxth	r2, r3
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	851a      	strh	r2, [r3, #40]	@ 0x28
 80016a2:	e00d      	b.n	80016c0 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80016aa:	d002      	beq.n	80016b2 <I2C_Slave_ISR_IT+0x1d2>
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d106      	bne.n	80016c0 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80016b2:	68f8      	ldr	r0, [r7, #12]
 80016b4:	f000 fbe2 	bl	8001e7c <I2C_ITSlaveSeqCplt>
 80016b8:	e002      	b.n	80016c0 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 80016ba:	bf00      	nop
 80016bc:	e000      	b.n	80016c0 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 80016be:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	2200      	movs	r2, #0
 80016c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80016c8:	2300      	movs	r3, #0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3718      	adds	r7, #24
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 80016d2:	b580      	push	{r7, lr}
 80016d4:	b088      	sub	sp, #32
 80016d6:	af02      	add	r7, sp, #8
 80016d8:	60f8      	str	r0, [r7, #12]
 80016da:	60b9      	str	r1, [r7, #8]
 80016dc:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d101      	bne.n	80016ec <I2C_Master_ISR_DMA+0x1a>
 80016e8:	2302      	movs	r3, #2
 80016ea:	e0e7      	b.n	80018bc <I2C_Master_ISR_DMA+0x1ea>
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	2201      	movs	r2, #1
 80016f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	f003 0310 	and.w	r3, r3, #16
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d016      	beq.n	800172c <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001704:	2b00      	cmp	r3, #0
 8001706:	d011      	beq.n	800172c <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	2210      	movs	r2, #16
 800170e:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001714:	f043 0204 	orr.w	r2, r3, #4
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800171c:	2120      	movs	r1, #32
 800171e:	68f8      	ldr	r0, [r7, #12]
 8001720:	f001 f814 	bl	800274c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001724:	68f8      	ldr	r0, [r7, #12]
 8001726:	f000 ff9c 	bl	8002662 <I2C_Flush_TXDR>
 800172a:	e0c2      	b.n	80018b2 <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001732:	2b00      	cmp	r3, #0
 8001734:	d07f      	beq.n	8001836 <I2C_Master_ISR_DMA+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800173c:	2b00      	cmp	r3, #0
 800173e:	d07a      	beq.n	8001836 <I2C_Master_ISR_DMA+0x164>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800174e:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001754:	b29b      	uxth	r3, r3
 8001756:	2b00      	cmp	r3, #0
 8001758:	d05c      	beq.n	8001814 <I2C_Master_ISR_DMA+0x142>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	b29b      	uxth	r3, r3
 8001762:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001766:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800176c:	b29b      	uxth	r3, r3
 800176e:	2bff      	cmp	r3, #255	@ 0xff
 8001770:	d914      	bls.n	800179c <I2C_Master_ISR_DMA+0xca>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	699b      	ldr	r3, [r3, #24]
 8001778:	0c1b      	lsrs	r3, r3, #16
 800177a:	b2db      	uxtb	r3, r3
 800177c:	f003 0301 	and.w	r3, r3, #1
 8001780:	b2db      	uxtb	r3, r3
 8001782:	2b01      	cmp	r3, #1
 8001784:	d103      	bne.n	800178e <I2C_Master_ISR_DMA+0xbc>
        {
          hi2c->XferSize = 1U;
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	2201      	movs	r2, #1
 800178a:	851a      	strh	r2, [r3, #40]	@ 0x28
 800178c:	e002      	b.n	8001794 <I2C_Master_ISR_DMA+0xc2>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	22ff      	movs	r2, #255	@ 0xff
 8001792:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        xfermode = I2C_RELOAD_MODE;
 8001794:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001798:	617b      	str	r3, [r7, #20]
 800179a:	e010      	b.n	80017be <I2C_Master_ISR_DMA+0xec>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017a0:	b29a      	uxth	r2, r3
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017aa:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80017ae:	d003      	beq.n	80017b8 <I2C_Master_ISR_DMA+0xe6>
        {
          xfermode = hi2c->XferOptions;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017b4:	617b      	str	r3, [r7, #20]
 80017b6:	e002      	b.n	80017be <I2C_Master_ISR_DMA+0xec>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80017b8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80017bc:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017c2:	b2da      	uxtb	r2, r3
 80017c4:	8a79      	ldrh	r1, [r7, #18]
 80017c6:	2300      	movs	r3, #0
 80017c8:	9300      	str	r3, [sp, #0]
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	68f8      	ldr	r0, [r7, #12]
 80017ce:	f000 ff8b 	bl	80026e8 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017d6:	b29a      	uxth	r2, r3
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	b29a      	uxth	r2, r3
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	2b22      	cmp	r3, #34	@ 0x22
 80017ee:	d108      	bne.n	8001802 <I2C_Master_ISR_DMA+0x130>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80017fe:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8001800:	e057      	b.n	80018b2 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001810:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8001812:	e04e      	b.n	80018b2 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800181e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001822:	d003      	beq.n	800182c <I2C_Master_ISR_DMA+0x15a>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8001824:	68f8      	ldr	r0, [r7, #12]
 8001826:	f000 faec 	bl	8001e02 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800182a:	e042      	b.n	80018b2 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800182c:	2140      	movs	r1, #64	@ 0x40
 800182e:	68f8      	ldr	r0, [r7, #12]
 8001830:	f000 fe00 	bl	8002434 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8001834:	e03d      	b.n	80018b2 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800183c:	2b00      	cmp	r3, #0
 800183e:	d028      	beq.n	8001892 <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8001846:	2b00      	cmp	r3, #0
 8001848:	d023      	beq.n	8001892 <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800184e:	b29b      	uxth	r3, r3
 8001850:	2b00      	cmp	r3, #0
 8001852:	d119      	bne.n	8001888 <I2C_Master_ISR_DMA+0x1b6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800185e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001862:	d025      	beq.n	80018b0 <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001868:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800186c:	d108      	bne.n	8001880 <I2C_Master_ISR_DMA+0x1ae>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	685a      	ldr	r2, [r3, #4]
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800187c:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800187e:	e017      	b.n	80018b0 <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8001880:	68f8      	ldr	r0, [r7, #12]
 8001882:	f000 fabe 	bl	8001e02 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8001886:	e013      	b.n	80018b0 <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001888:	2140      	movs	r1, #64	@ 0x40
 800188a:	68f8      	ldr	r0, [r7, #12]
 800188c:	f000 fdd2 	bl	8002434 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001890:	e00e      	b.n	80018b0 <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	f003 0320 	and.w	r3, r3, #32
 8001898:	2b00      	cmp	r3, #0
 800189a:	d00a      	beq.n	80018b2 <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d005      	beq.n	80018b2 <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80018a6:	68b9      	ldr	r1, [r7, #8]
 80018a8:	68f8      	ldr	r0, [r7, #12]
 80018aa:	f000 fb43 	bl	8001f34 <I2C_ITMasterCplt>
 80018ae:	e000      	b.n	80018b2 <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 80018b0:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	2200      	movs	r2, #0
 80018b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80018ba:	2300      	movs	r3, #0
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3718      	adds	r7, #24
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b088      	sub	sp, #32
 80018c8:	af02      	add	r7, sp, #8
 80018ca:	60f8      	str	r0, [r7, #12]
 80018cc:	60b9      	str	r1, [r7, #8]
 80018ce:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 80018d0:	4b90      	ldr	r3, [pc, #576]	@ (8001b14 <I2C_Mem_ISR_DMA+0x250>)
 80018d2:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d101      	bne.n	80018e2 <I2C_Mem_ISR_DMA+0x1e>
 80018de:	2302      	movs	r3, #2
 80018e0:	e12f      	b.n	8001b42 <I2C_Mem_ISR_DMA+0x27e>
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	2201      	movs	r2, #1
 80018e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80018ea:	68bb      	ldr	r3, [r7, #8]
 80018ec:	f003 0310 	and.w	r3, r3, #16
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d016      	beq.n	8001922 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d011      	beq.n	8001922 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	2210      	movs	r2, #16
 8001904:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800190a:	f043 0204 	orr.w	r2, r3, #4
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8001912:	2120      	movs	r1, #32
 8001914:	68f8      	ldr	r0, [r7, #12]
 8001916:	f000 ff19 	bl	800274c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800191a:	68f8      	ldr	r0, [r7, #12]
 800191c:	f000 fea1 	bl	8002662 <I2C_Flush_TXDR>
 8001920:	e10a      	b.n	8001b38 <I2C_Mem_ISR_DMA+0x274>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	f003 0302 	and.w	r3, r3, #2
 8001928:	2b00      	cmp	r3, #0
 800192a:	d00e      	beq.n	800194a <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001932:	2b00      	cmp	r3, #0
 8001934:	d009      	beq.n	800194a <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	68fa      	ldr	r2, [r7, #12]
 800193c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800193e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	f04f 32ff 	mov.w	r2, #4294967295
 8001946:	651a      	str	r2, [r3, #80]	@ 0x50
 8001948:	e0f6      	b.n	8001b38 <I2C_Mem_ISR_DMA+0x274>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001950:	2b00      	cmp	r3, #0
 8001952:	d06d      	beq.n	8001a30 <I2C_Mem_ISR_DMA+0x16c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800195a:	2b00      	cmp	r3, #0
 800195c:	d068      	beq.n	8001a30 <I2C_Mem_ISR_DMA+0x16c>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800195e:	2101      	movs	r1, #1
 8001960:	68f8      	ldr	r0, [r7, #12]
 8001962:	f000 ff77 	bl	8002854 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8001966:	2110      	movs	r1, #16
 8001968:	68f8      	ldr	r0, [r7, #12]
 800196a:	f000 feef 	bl	800274c <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001972:	b29b      	uxth	r3, r3
 8001974:	2b00      	cmp	r3, #0
 8001976:	d056      	beq.n	8001a26 <I2C_Mem_ISR_DMA+0x162>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800197c:	b29b      	uxth	r3, r3
 800197e:	2bff      	cmp	r3, #255	@ 0xff
 8001980:	d91e      	bls.n	80019c0 <I2C_Mem_ISR_DMA+0xfc>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	699b      	ldr	r3, [r3, #24]
 8001988:	0c1b      	lsrs	r3, r3, #16
 800198a:	b2db      	uxtb	r3, r3
 800198c:	f003 0301 	and.w	r3, r3, #1
 8001990:	b2db      	uxtb	r3, r3
 8001992:	2b01      	cmp	r3, #1
 8001994:	d103      	bne.n	800199e <I2C_Mem_ISR_DMA+0xda>
        {
          hi2c->XferSize = 1U;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	2201      	movs	r2, #1
 800199a:	851a      	strh	r2, [r3, #40]	@ 0x28
 800199c:	e002      	b.n	80019a4 <I2C_Mem_ISR_DMA+0xe0>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	22ff      	movs	r2, #255	@ 0xff
 80019a2:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019a8:	b299      	uxth	r1, r3
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019ae:	b2da      	uxtb	r2, r3
 80019b0:	2300      	movs	r3, #0
 80019b2:	9300      	str	r3, [sp, #0]
 80019b4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80019b8:	68f8      	ldr	r0, [r7, #12]
 80019ba:	f000 fe95 	bl	80026e8 <I2C_TransferConfig>
 80019be:	e011      	b.n	80019e4 <I2C_Mem_ISR_DMA+0x120>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019c4:	b29a      	uxth	r2, r3
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019ce:	b299      	uxth	r1, r3
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019d4:	b2da      	uxtb	r2, r3
 80019d6:	2300      	movs	r3, #0
 80019d8:	9300      	str	r3, [sp, #0]
 80019da:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80019de:	68f8      	ldr	r0, [r7, #12]
 80019e0:	f000 fe82 	bl	80026e8 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019e8:	b29a      	uxth	r2, r3
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	b29a      	uxth	r2, r3
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	2b22      	cmp	r3, #34	@ 0x22
 8001a00:	d108      	bne.n	8001a14 <I2C_Mem_ISR_DMA+0x150>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001a10:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8001a12:	e091      	b.n	8001b38 <I2C_Mem_ISR_DMA+0x274>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001a22:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8001a24:	e088      	b.n	8001b38 <I2C_Mem_ISR_DMA+0x274>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001a26:	2140      	movs	r1, #64	@ 0x40
 8001a28:	68f8      	ldr	r0, [r7, #12]
 8001a2a:	f000 fd03 	bl	8002434 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8001a2e:	e083      	b.n	8001b38 <I2C_Mem_ISR_DMA+0x274>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d070      	beq.n	8001b1c <I2C_Mem_ISR_DMA+0x258>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d06b      	beq.n	8001b1c <I2C_Mem_ISR_DMA+0x258>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001a44:	2101      	movs	r1, #1
 8001a46:	68f8      	ldr	r0, [r7, #12]
 8001a48:	f000 ff04 	bl	8002854 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8001a4c:	2110      	movs	r1, #16
 8001a4e:	68f8      	ldr	r0, [r7, #12]
 8001a50:	f000 fe7c 	bl	800274c <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	2b22      	cmp	r3, #34	@ 0x22
 8001a5e:	d101      	bne.n	8001a64 <I2C_Mem_ISR_DMA+0x1a0>
    {
      direction = I2C_GENERATE_START_READ;
 8001a60:	4b2d      	ldr	r3, [pc, #180]	@ (8001b18 <I2C_Mem_ISR_DMA+0x254>)
 8001a62:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a68:	b29b      	uxth	r3, r3
 8001a6a:	2bff      	cmp	r3, #255	@ 0xff
 8001a6c:	d91e      	bls.n	8001aac <I2C_Mem_ISR_DMA+0x1e8>
    {
      /* Errata workaround 170323 */
      if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	699b      	ldr	r3, [r3, #24]
 8001a74:	0c1b      	lsrs	r3, r3, #16
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	f003 0301 	and.w	r3, r3, #1
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d103      	bne.n	8001a8a <I2C_Mem_ISR_DMA+0x1c6>
      {
        hi2c->XferSize = 1U;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	2201      	movs	r2, #1
 8001a86:	851a      	strh	r2, [r3, #40]	@ 0x28
 8001a88:	e002      	b.n	8001a90 <I2C_Mem_ISR_DMA+0x1cc>
      }
      else
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	22ff      	movs	r2, #255	@ 0xff
 8001a8e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a94:	b299      	uxth	r1, r3
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a9a:	b2da      	uxtb	r2, r3
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	9300      	str	r3, [sp, #0]
 8001aa0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001aa4:	68f8      	ldr	r0, [r7, #12]
 8001aa6:	f000 fe1f 	bl	80026e8 <I2C_TransferConfig>
 8001aaa:	e011      	b.n	8001ad0 <I2C_Mem_ISR_DMA+0x20c>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ab0:	b29a      	uxth	r2, r3
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aba:	b299      	uxth	r1, r3
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ac0:	b2da      	uxtb	r2, r3
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	9300      	str	r3, [sp, #0]
 8001ac6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001aca:	68f8      	ldr	r0, [r7, #12]
 8001acc:	f000 fe0c 	bl	80026e8 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ad4:	b29a      	uxth	r2, r3
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	b29a      	uxth	r2, r3
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	2b22      	cmp	r3, #34	@ 0x22
 8001aec:	d108      	bne.n	8001b00 <I2C_Mem_ISR_DMA+0x23c>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001afc:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001afe:	e01b      	b.n	8001b38 <I2C_Mem_ISR_DMA+0x274>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001b0e:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001b10:	e012      	b.n	8001b38 <I2C_Mem_ISR_DMA+0x274>
 8001b12:	bf00      	nop
 8001b14:	80002000 	.word	0x80002000
 8001b18:	80002400 	.word	0x80002400
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	f003 0320 	and.w	r3, r3, #32
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d008      	beq.n	8001b38 <I2C_Mem_ISR_DMA+0x274>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d003      	beq.n	8001b38 <I2C_Mem_ISR_DMA+0x274>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8001b30:	68b9      	ldr	r1, [r7, #8]
 8001b32:	68f8      	ldr	r0, [r7, #12]
 8001b34:	f000 f9fe 	bl	8001f34 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8001b40:	2300      	movs	r3, #0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3718      	adds	r7, #24
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop

08001b4c <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b088      	sub	sp, #32
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	60f8      	str	r0, [r7, #12]
 8001b54:	60b9      	str	r1, [r7, #8]
 8001b56:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b5c:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d101      	bne.n	8001b70 <I2C_Slave_ISR_DMA+0x24>
 8001b6c:	2302      	movs	r3, #2
 8001b6e:	e0c0      	b.n	8001cf2 <I2C_Slave_ISR_DMA+0x1a6>
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	2201      	movs	r2, #1
 8001b74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	f003 0320 	and.w	r3, r3, #32
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d009      	beq.n	8001b96 <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d004      	beq.n	8001b96 <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8001b8c:	68b9      	ldr	r1, [r7, #8]
 8001b8e:	68f8      	ldr	r0, [r7, #12]
 8001b90:	f000 fa98 	bl	80020c4 <I2C_ITSlaveCplt>
 8001b94:	e0a8      	b.n	8001ce8 <I2C_Slave_ISR_DMA+0x19c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	f003 0310 	and.w	r3, r3, #16
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	f000 8095 	beq.w	8001ccc <I2C_Slave_ISR_DMA+0x180>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	f000 808f 	beq.w	8001ccc <I2C_Slave_ISR_DMA+0x180>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d104      	bne.n	8001bc2 <I2C_Slave_ISR_DMA+0x76>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d07d      	beq.n	8001cbe <I2C_Slave_ISR_DMA+0x172>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d00c      	beq.n	8001be4 <I2C_Slave_ISR_DMA+0x98>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d007      	beq.n	8001be4 <I2C_Slave_ISR_DMA+0x98>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d101      	bne.n	8001be4 <I2C_Slave_ISR_DMA+0x98>
          {
            treatdmanack = 1U;
 8001be0:	2301      	movs	r3, #1
 8001be2:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d00c      	beq.n	8001c06 <I2C_Slave_ISR_DMA+0xba>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d007      	beq.n	8001c06 <I2C_Slave_ISR_DMA+0xba>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d101      	bne.n	8001c06 <I2C_Slave_ISR_DMA+0xba>
          {
            treatdmanack = 1U;
 8001c02:	2301      	movs	r3, #1
 8001c04:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d128      	bne.n	8001c5e <I2C_Slave_ISR_DMA+0x112>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	2b28      	cmp	r3, #40	@ 0x28
 8001c16:	d108      	bne.n	8001c2a <I2C_Slave_ISR_DMA+0xde>
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001c1e:	d104      	bne.n	8001c2a <I2C_Slave_ISR_DMA+0xde>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8001c20:	68b9      	ldr	r1, [r7, #8]
 8001c22:	68f8      	ldr	r0, [r7, #12]
 8001c24:	f000 fbb2 	bl	800238c <I2C_ITListenCplt>
 8001c28:	e048      	b.n	8001cbc <I2C_Slave_ISR_DMA+0x170>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	2b29      	cmp	r3, #41	@ 0x29
 8001c34:	d10e      	bne.n	8001c54 <I2C_Slave_ISR_DMA+0x108>
 8001c36:	69bb      	ldr	r3, [r7, #24]
 8001c38:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001c3c:	d00a      	beq.n	8001c54 <I2C_Slave_ISR_DMA+0x108>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	2210      	movs	r2, #16
 8001c44:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8001c46:	68f8      	ldr	r0, [r7, #12]
 8001c48:	f000 fd0b 	bl	8002662 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8001c4c:	68f8      	ldr	r0, [r7, #12]
 8001c4e:	f000 f915 	bl	8001e7c <I2C_ITSlaveSeqCplt>
 8001c52:	e033      	b.n	8001cbc <I2C_Slave_ISR_DMA+0x170>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2210      	movs	r2, #16
 8001c5a:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8001c5c:	e034      	b.n	8001cc8 <I2C_Slave_ISR_DMA+0x17c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	2210      	movs	r2, #16
 8001c64:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c6a:	f043 0204 	orr.w	r2, r3, #4
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c78:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001c7a:	69bb      	ldr	r3, [r7, #24]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d003      	beq.n	8001c88 <I2C_Slave_ISR_DMA+0x13c>
 8001c80:	69bb      	ldr	r3, [r7, #24]
 8001c82:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c86:	d11f      	bne.n	8001cc8 <I2C_Slave_ISR_DMA+0x17c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001c88:	7dfb      	ldrb	r3, [r7, #23]
 8001c8a:	2b21      	cmp	r3, #33	@ 0x21
 8001c8c:	d002      	beq.n	8001c94 <I2C_Slave_ISR_DMA+0x148>
 8001c8e:	7dfb      	ldrb	r3, [r7, #23]
 8001c90:	2b29      	cmp	r3, #41	@ 0x29
 8001c92:	d103      	bne.n	8001c9c <I2C_Slave_ISR_DMA+0x150>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	2221      	movs	r2, #33	@ 0x21
 8001c98:	631a      	str	r2, [r3, #48]	@ 0x30
 8001c9a:	e008      	b.n	8001cae <I2C_Slave_ISR_DMA+0x162>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001c9c:	7dfb      	ldrb	r3, [r7, #23]
 8001c9e:	2b22      	cmp	r3, #34	@ 0x22
 8001ca0:	d002      	beq.n	8001ca8 <I2C_Slave_ISR_DMA+0x15c>
 8001ca2:	7dfb      	ldrb	r3, [r7, #23]
 8001ca4:	2b2a      	cmp	r3, #42	@ 0x2a
 8001ca6:	d102      	bne.n	8001cae <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2222      	movs	r2, #34	@ 0x22
 8001cac:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	68f8      	ldr	r0, [r7, #12]
 8001cb6:	f000 fbbd 	bl	8002434 <I2C_ITError>
      if (treatdmanack == 1U)
 8001cba:	e005      	b.n	8001cc8 <I2C_Slave_ISR_DMA+0x17c>
 8001cbc:	e004      	b.n	8001cc8 <I2C_Slave_ISR_DMA+0x17c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	2210      	movs	r2, #16
 8001cc4:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001cc6:	e00f      	b.n	8001ce8 <I2C_Slave_ISR_DMA+0x19c>
      if (treatdmanack == 1U)
 8001cc8:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001cca:	e00d      	b.n	8001ce8 <I2C_Slave_ISR_DMA+0x19c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	f003 0308 	and.w	r3, r3, #8
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d008      	beq.n	8001ce8 <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d003      	beq.n	8001ce8 <I2C_Slave_ISR_DMA+0x19c>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8001ce0:	68b9      	ldr	r1, [r7, #8]
 8001ce2:	68f8      	ldr	r0, [r7, #12]
 8001ce4:	f000 f809 	bl	8001cfa <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	2200      	movs	r2, #0
 8001cec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8001cf0:	2300      	movs	r3, #0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3720      	adds	r7, #32
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}

08001cfa <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	b084      	sub	sp, #16
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]
 8001d02:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8001d10:	2b28      	cmp	r3, #40	@ 0x28
 8001d12:	d16a      	bne.n	8001dea <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	699b      	ldr	r3, [r3, #24]
 8001d1a:	0c1b      	lsrs	r3, r3, #16
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	f003 0301 	and.w	r3, r3, #1
 8001d22:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	699b      	ldr	r3, [r3, #24]
 8001d2a:	0c1b      	lsrs	r3, r3, #16
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8001d32:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	b29b      	uxth	r3, r3
 8001d3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d40:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	b29b      	uxth	r3, r3
 8001d4a:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8001d4e:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	d138      	bne.n	8001dca <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8001d58:	897b      	ldrh	r3, [r7, #10]
 8001d5a:	09db      	lsrs	r3, r3, #7
 8001d5c:	b29a      	uxth	r2, r3
 8001d5e:	89bb      	ldrh	r3, [r7, #12]
 8001d60:	4053      	eors	r3, r2
 8001d62:	b29b      	uxth	r3, r3
 8001d64:	f003 0306 	and.w	r3, r3, #6
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d11c      	bne.n	8001da6 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8001d6c:	897b      	ldrh	r3, [r7, #10]
 8001d6e:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d74:	1c5a      	adds	r2, r3, #1
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d7e:	2b02      	cmp	r3, #2
 8001d80:	d13b      	bne.n	8001dfa <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2200      	movs	r2, #0
 8001d86:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	2208      	movs	r2, #8
 8001d8e:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2200      	movs	r2, #0
 8001d94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001d98:	89ba      	ldrh	r2, [r7, #12]
 8001d9a:	7bfb      	ldrb	r3, [r7, #15]
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f7ff fa29 	bl	80011f6 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8001da4:	e029      	b.n	8001dfa <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8001da6:	893b      	ldrh	r3, [r7, #8]
 8001da8:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001daa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f000 fd50 	bl	8002854 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2200      	movs	r2, #0
 8001db8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001dbc:	89ba      	ldrh	r2, [r7, #12]
 8001dbe:	7bfb      	ldrb	r3, [r7, #15]
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f7ff fa17 	bl	80011f6 <HAL_I2C_AddrCallback>
}
 8001dc8:	e017      	b.n	8001dfa <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001dca:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f000 fd40 	bl	8002854 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001ddc:	89ba      	ldrh	r2, [r7, #12]
 8001dde:	7bfb      	ldrb	r3, [r7, #15]
 8001de0:	4619      	mov	r1, r3
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f7ff fa07 	bl	80011f6 <HAL_I2C_AddrCallback>
}
 8001de8:	e007      	b.n	8001dfa <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	2208      	movs	r2, #8
 8001df0:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2200      	movs	r2, #0
 8001df6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8001dfa:	bf00      	nop
 8001dfc:	3710      	adds	r7, #16
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}

08001e02 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8001e02:	b580      	push	{r7, lr}
 8001e04:	b082      	sub	sp, #8
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	2b21      	cmp	r3, #33	@ 0x21
 8001e1c:	d115      	bne.n	8001e4a <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2220      	movs	r2, #32
 8001e22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2211      	movs	r2, #17
 8001e2a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001e32:	2101      	movs	r1, #1
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	f000 fd0d 	bl	8002854 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f7fe fb70 	bl	8000528 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8001e48:	e014      	b.n	8001e74 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2220      	movs	r2, #32
 8001e4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2212      	movs	r2, #18
 8001e56:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001e5e:	2102      	movs	r1, #2
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f000 fcf7 	bl	8002854 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f7fe fb8e 	bl	8000590 <HAL_I2C_MasterRxCpltCallback>
}
 8001e74:	bf00      	nop
 8001e76:	3708      	adds	r7, #8
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}

08001e7c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b084      	sub	sp, #16
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d008      	beq.n	8001eb0 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001eac:	601a      	str	r2, [r3, #0]
 8001eae:	e00c      	b.n	8001eca <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d007      	beq.n	8001eca <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001ec8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	2b29      	cmp	r3, #41	@ 0x29
 8001ed4:	d112      	bne.n	8001efc <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2228      	movs	r2, #40	@ 0x28
 8001eda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2221      	movs	r2, #33	@ 0x21
 8001ee2:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001ee4:	2101      	movs	r1, #1
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f000 fcb4 	bl	8002854 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f7ff f96a 	bl	80011ce <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8001efa:	e017      	b.n	8001f2c <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	2b2a      	cmp	r3, #42	@ 0x2a
 8001f06:	d111      	bne.n	8001f2c <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2228      	movs	r2, #40	@ 0x28
 8001f0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2222      	movs	r2, #34	@ 0x22
 8001f14:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001f16:	2102      	movs	r1, #2
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f000 fc9b 	bl	8002854 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2200      	movs	r2, #0
 8001f22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f7ff f95b 	bl	80011e2 <HAL_I2C_SlaveRxCpltCallback>
}
 8001f2c:	bf00      	nop
 8001f2e:	3710      	adds	r7, #16
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}

08001f34 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b086      	sub	sp, #24
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	2220      	movs	r2, #32
 8001f48:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	2b21      	cmp	r3, #33	@ 0x21
 8001f54:	d107      	bne.n	8001f66 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001f56:	2101      	movs	r1, #1
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f000 fc7b 	bl	8002854 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2211      	movs	r2, #17
 8001f62:	631a      	str	r2, [r3, #48]	@ 0x30
 8001f64:	e00c      	b.n	8001f80 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	2b22      	cmp	r3, #34	@ 0x22
 8001f70:	d106      	bne.n	8001f80 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001f72:	2102      	movs	r1, #2
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f000 fc6d 	bl	8002854 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2212      	movs	r2, #18
 8001f7e:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	6859      	ldr	r1, [r3, #4]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	4b4c      	ldr	r3, [pc, #304]	@ (80020bc <I2C_ITMasterCplt+0x188>)
 8001f8c:	400b      	ands	r3, r1
 8001f8e:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2200      	movs	r2, #0
 8001f94:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a49      	ldr	r2, [pc, #292]	@ (80020c0 <I2C_ITMasterCplt+0x18c>)
 8001f9a:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	f003 0310 	and.w	r3, r3, #16
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d009      	beq.n	8001fba <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	2210      	movs	r2, #16
 8001fac:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fb2:	f043 0204 	orr.w	r2, r3, #4
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	2b60      	cmp	r3, #96	@ 0x60
 8001fc4:	d10a      	bne.n	8001fdc <I2C_ITMasterCplt+0xa8>
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	f003 0304 	and.w	r3, r3, #4
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d005      	beq.n	8001fdc <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8001fda:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f000 fb40 	bl	8002662 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fe6:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	2b60      	cmp	r3, #96	@ 0x60
 8001ff2:	d002      	beq.n	8001ffa <I2C_ITMasterCplt+0xc6>
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d006      	beq.n	8002008 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ffe:	4619      	mov	r1, r3
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f000 fa17 	bl	8002434 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002006:	e054      	b.n	80020b2 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800200e:	b2db      	uxtb	r3, r3
 8002010:	2b21      	cmp	r3, #33	@ 0x21
 8002012:	d124      	bne.n	800205e <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2220      	movs	r2, #32
 8002018:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2200      	movs	r2, #0
 8002020:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002028:	b2db      	uxtb	r3, r3
 800202a:	2b40      	cmp	r3, #64	@ 0x40
 800202c:	d10b      	bne.n	8002046 <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2200      	movs	r2, #0
 800203a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f7ff f8f1 	bl	8001226 <HAL_I2C_MemTxCpltCallback>
}
 8002044:	e035      	b.n	80020b2 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2200      	movs	r2, #0
 800204a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f7fe fa66 	bl	8000528 <HAL_I2C_MasterTxCpltCallback>
}
 800205c:	e029      	b.n	80020b2 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002064:	b2db      	uxtb	r3, r3
 8002066:	2b22      	cmp	r3, #34	@ 0x22
 8002068:	d123      	bne.n	80020b2 <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2220      	movs	r2, #32
 800206e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2200      	movs	r2, #0
 8002076:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800207e:	b2db      	uxtb	r3, r3
 8002080:	2b40      	cmp	r3, #64	@ 0x40
 8002082:	d10b      	bne.n	800209c <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2200      	movs	r2, #0
 8002088:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2200      	movs	r2, #0
 8002090:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f7ff f8d0 	bl	800123a <HAL_I2C_MemRxCpltCallback>
}
 800209a:	e00a      	b.n	80020b2 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2200      	movs	r2, #0
 80020a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2200      	movs	r2, #0
 80020a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f7fe fa6f 	bl	8000590 <HAL_I2C_MasterRxCpltCallback>
}
 80020b2:	bf00      	nop
 80020b4:	3718      	adds	r7, #24
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	fe00e800 	.word	0xfe00e800
 80020c0:	ffff0000 	.word	0xffff0000

080020c4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b086      	sub	sp, #24
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020de:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020e6:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	2220      	movs	r2, #32
 80020ee:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80020f0:	7afb      	ldrb	r3, [r7, #11]
 80020f2:	2b21      	cmp	r3, #33	@ 0x21
 80020f4:	d002      	beq.n	80020fc <I2C_ITSlaveCplt+0x38>
 80020f6:	7afb      	ldrb	r3, [r7, #11]
 80020f8:	2b29      	cmp	r3, #41	@ 0x29
 80020fa:	d108      	bne.n	800210e <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80020fc:	f248 0101 	movw	r1, #32769	@ 0x8001
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f000 fba7 	bl	8002854 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2221      	movs	r2, #33	@ 0x21
 800210a:	631a      	str	r2, [r3, #48]	@ 0x30
 800210c:	e019      	b.n	8002142 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800210e:	7afb      	ldrb	r3, [r7, #11]
 8002110:	2b22      	cmp	r3, #34	@ 0x22
 8002112:	d002      	beq.n	800211a <I2C_ITSlaveCplt+0x56>
 8002114:	7afb      	ldrb	r3, [r7, #11]
 8002116:	2b2a      	cmp	r3, #42	@ 0x2a
 8002118:	d108      	bne.n	800212c <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800211a:	f248 0102 	movw	r1, #32770	@ 0x8002
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f000 fb98 	bl	8002854 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2222      	movs	r2, #34	@ 0x22
 8002128:	631a      	str	r2, [r3, #48]	@ 0x30
 800212a:	e00a      	b.n	8002142 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800212c:	7afb      	ldrb	r3, [r7, #11]
 800212e:	2b28      	cmp	r3, #40	@ 0x28
 8002130:	d107      	bne.n	8002142 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8002132:	f248 0103 	movw	r1, #32771	@ 0x8003
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f000 fb8c 	bl	8002854 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2200      	movs	r2, #0
 8002140:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	685a      	ldr	r2, [r3, #4]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002150:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	6859      	ldr	r1, [r3, #4]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	4b89      	ldr	r3, [pc, #548]	@ (8002384 <I2C_ITSlaveCplt+0x2c0>)
 800215e:	400b      	ands	r3, r1
 8002160:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f000 fa7d 	bl	8002662 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d013      	beq.n	800219a <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002180:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002186:	2b00      	cmp	r3, #0
 8002188:	d01f      	beq.n	80021ca <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	b29a      	uxth	r2, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002198:	e017      	b.n	80021ca <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d012      	beq.n	80021ca <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80021b2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d006      	beq.n	80021ca <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	b29a      	uxth	r2, r3
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	f003 0304 	and.w	r3, r3, #4
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d020      	beq.n	8002216 <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	f023 0304 	bic.w	r3, r3, #4
 80021da:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021e6:	b2d2      	uxtb	r2, r2
 80021e8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ee:	1c5a      	adds	r2, r3, #1
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d00c      	beq.n	8002216 <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002200:	3b01      	subs	r3, #1
 8002202:	b29a      	uxth	r2, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800220c:	b29b      	uxth	r3, r3
 800220e:	3b01      	subs	r3, #1
 8002210:	b29a      	uxth	r2, r3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800221a:	b29b      	uxth	r3, r3
 800221c:	2b00      	cmp	r3, #0
 800221e:	d005      	beq.n	800222c <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002224:	f043 0204 	orr.w	r2, r3, #4
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	f003 0310 	and.w	r3, r3, #16
 8002232:	2b00      	cmp	r3, #0
 8002234:	d049      	beq.n	80022ca <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800223c:	2b00      	cmp	r3, #0
 800223e:	d044      	beq.n	80022ca <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002244:	b29b      	uxth	r3, r3
 8002246:	2b00      	cmp	r3, #0
 8002248:	d128      	bne.n	800229c <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002250:	b2db      	uxtb	r3, r3
 8002252:	2b28      	cmp	r3, #40	@ 0x28
 8002254:	d108      	bne.n	8002268 <I2C_ITSlaveCplt+0x1a4>
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800225c:	d104      	bne.n	8002268 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800225e:	6979      	ldr	r1, [r7, #20]
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	f000 f893 	bl	800238c <I2C_ITListenCplt>
 8002266:	e030      	b.n	80022ca <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800226e:	b2db      	uxtb	r3, r3
 8002270:	2b29      	cmp	r3, #41	@ 0x29
 8002272:	d10e      	bne.n	8002292 <I2C_ITSlaveCplt+0x1ce>
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800227a:	d00a      	beq.n	8002292 <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2210      	movs	r2, #16
 8002282:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	f000 f9ec 	bl	8002662 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f7ff fdf6 	bl	8001e7c <I2C_ITSlaveSeqCplt>
 8002290:	e01b      	b.n	80022ca <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	2210      	movs	r2, #16
 8002298:	61da      	str	r2, [r3, #28]
 800229a:	e016      	b.n	80022ca <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2210      	movs	r2, #16
 80022a2:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022a8:	f043 0204 	orr.w	r2, r3, #4
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d003      	beq.n	80022be <I2C_ITSlaveCplt+0x1fa>
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80022bc:	d105      	bne.n	80022ca <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022c2:	4619      	mov	r1, r3
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f000 f8b5 	bl	8002434 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2200      	movs	r2, #0
 80022d6:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d010      	beq.n	8002302 <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022e4:	4619      	mov	r1, r3
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f000 f8a4 	bl	8002434 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	2b28      	cmp	r3, #40	@ 0x28
 80022f6:	d141      	bne.n	800237c <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80022f8:	6979      	ldr	r1, [r7, #20]
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f000 f846 	bl	800238c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002300:	e03c      	b.n	800237c <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002306:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800230a:	d014      	beq.n	8002336 <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f7ff fdb5 	bl	8001e7c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4a1c      	ldr	r2, [pc, #112]	@ (8002388 <I2C_ITSlaveCplt+0x2c4>)
 8002316:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2220      	movs	r2, #32
 800231c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2200      	movs	r2, #0
 8002324:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f7fe ff6f 	bl	8001212 <HAL_I2C_ListenCpltCallback>
}
 8002334:	e022      	b.n	800237c <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800233c:	b2db      	uxtb	r3, r3
 800233e:	2b22      	cmp	r3, #34	@ 0x22
 8002340:	d10e      	bne.n	8002360 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2220      	movs	r2, #32
 8002346:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2200      	movs	r2, #0
 8002354:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f7fe ff42 	bl	80011e2 <HAL_I2C_SlaveRxCpltCallback>
}
 800235e:	e00d      	b.n	800237c <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2220      	movs	r2, #32
 8002364:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2200      	movs	r2, #0
 800236c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2200      	movs	r2, #0
 8002372:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f7fe ff29 	bl	80011ce <HAL_I2C_SlaveTxCpltCallback>
}
 800237c:	bf00      	nop
 800237e:	3718      	adds	r7, #24
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}
 8002384:	fe00e800 	.word	0xfe00e800
 8002388:	ffff0000 	.word	0xffff0000

0800238c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a25      	ldr	r2, [pc, #148]	@ (8002430 <I2C_ITListenCplt+0xa4>)
 800239a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2200      	movs	r2, #0
 80023a0:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2220      	movs	r2, #32
 80023a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2200      	movs	r2, #0
 80023ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2200      	movs	r2, #0
 80023b6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	f003 0304 	and.w	r3, r3, #4
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d022      	beq.n	8002408 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023cc:	b2d2      	uxtb	r2, r2
 80023ce:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023d4:	1c5a      	adds	r2, r3, #1
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d012      	beq.n	8002408 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023e6:	3b01      	subs	r3, #1
 80023e8:	b29a      	uxth	r2, r3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	3b01      	subs	r3, #1
 80023f6:	b29a      	uxth	r2, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002400:	f043 0204 	orr.w	r2, r3, #4
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002408:	f248 0103 	movw	r1, #32771	@ 0x8003
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	f000 fa21 	bl	8002854 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	2210      	movs	r2, #16
 8002418:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2200      	movs	r2, #0
 800241e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f7fe fef5 	bl	8001212 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8002428:	bf00      	nop
 800242a:	3708      	adds	r7, #8
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	ffff0000 	.word	0xffff0000

08002434 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b084      	sub	sp, #16
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002444:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2200      	movs	r2, #0
 800244a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4a6d      	ldr	r2, [pc, #436]	@ (8002608 <I2C_ITError+0x1d4>)
 8002452:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2200      	movs	r2, #0
 8002458:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	431a      	orrs	r2, r3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002466:	7bfb      	ldrb	r3, [r7, #15]
 8002468:	2b28      	cmp	r3, #40	@ 0x28
 800246a:	d005      	beq.n	8002478 <I2C_ITError+0x44>
 800246c:	7bfb      	ldrb	r3, [r7, #15]
 800246e:	2b29      	cmp	r3, #41	@ 0x29
 8002470:	d002      	beq.n	8002478 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8002472:	7bfb      	ldrb	r3, [r7, #15]
 8002474:	2b2a      	cmp	r3, #42	@ 0x2a
 8002476:	d10b      	bne.n	8002490 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002478:	2103      	movs	r1, #3
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f000 f9ea 	bl	8002854 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2228      	movs	r2, #40	@ 0x28
 8002484:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	4a60      	ldr	r2, [pc, #384]	@ (800260c <I2C_ITError+0x1d8>)
 800248c:	635a      	str	r2, [r3, #52]	@ 0x34
 800248e:	e030      	b.n	80024f2 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002490:	f248 0103 	movw	r1, #32771	@ 0x8003
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f000 f9dd 	bl	8002854 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f000 f8e1 	bl	8002662 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	2b60      	cmp	r3, #96	@ 0x60
 80024aa:	d01f      	beq.n	80024ec <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2220      	movs	r2, #32
 80024b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	699b      	ldr	r3, [r3, #24]
 80024ba:	f003 0320 	and.w	r3, r3, #32
 80024be:	2b20      	cmp	r3, #32
 80024c0:	d114      	bne.n	80024ec <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	699b      	ldr	r3, [r3, #24]
 80024c8:	f003 0310 	and.w	r3, r3, #16
 80024cc:	2b10      	cmp	r3, #16
 80024ce:	d109      	bne.n	80024e4 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2210      	movs	r2, #16
 80024d6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024dc:	f043 0204 	orr.w	r2, r3, #4
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	2220      	movs	r2, #32
 80024ea:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2200      	movs	r2, #0
 80024f0:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024f6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d039      	beq.n	8002574 <I2C_ITError+0x140>
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	2b11      	cmp	r3, #17
 8002504:	d002      	beq.n	800250c <I2C_ITError+0xd8>
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	2b21      	cmp	r3, #33	@ 0x21
 800250a:	d133      	bne.n	8002574 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002516:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800251a:	d107      	bne.n	800252c <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800252a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002530:	4618      	mov	r0, r3
 8002532:	f7fe fa9c 	bl	8000a6e <HAL_DMA_GetState>
 8002536:	4603      	mov	r3, r0
 8002538:	2b01      	cmp	r3, #1
 800253a:	d017      	beq.n	800256c <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002540:	4a33      	ldr	r2, [pc, #204]	@ (8002610 <I2C_ITError+0x1dc>)
 8002542:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2200      	movs	r2, #0
 8002548:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002550:	4618      	mov	r0, r3
 8002552:	f7fe fa4e 	bl	80009f2 <HAL_DMA_Abort_IT>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d04d      	beq.n	80025f8 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002560:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002566:	4610      	mov	r0, r2
 8002568:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800256a:	e045      	b.n	80025f8 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	f000 f851 	bl	8002614 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002572:	e041      	b.n	80025f8 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002578:	2b00      	cmp	r3, #0
 800257a:	d039      	beq.n	80025f0 <I2C_ITError+0x1bc>
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	2b12      	cmp	r3, #18
 8002580:	d002      	beq.n	8002588 <I2C_ITError+0x154>
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	2b22      	cmp	r3, #34	@ 0x22
 8002586:	d133      	bne.n	80025f0 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002592:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002596:	d107      	bne.n	80025a8 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80025a6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025ac:	4618      	mov	r0, r3
 80025ae:	f7fe fa5e 	bl	8000a6e <HAL_DMA_GetState>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d017      	beq.n	80025e8 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025bc:	4a14      	ldr	r2, [pc, #80]	@ (8002610 <I2C_ITError+0x1dc>)
 80025be:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2200      	movs	r2, #0
 80025c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025cc:	4618      	mov	r0, r3
 80025ce:	f7fe fa10 	bl	80009f2 <HAL_DMA_Abort_IT>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d011      	beq.n	80025fc <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80025e2:	4610      	mov	r0, r2
 80025e4:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80025e6:	e009      	b.n	80025fc <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	f000 f813 	bl	8002614 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80025ee:	e005      	b.n	80025fc <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	f000 f80f 	bl	8002614 <I2C_TreatErrorCallback>
  }
}
 80025f6:	e002      	b.n	80025fe <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80025f8:	bf00      	nop
 80025fa:	e000      	b.n	80025fe <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80025fc:	bf00      	nop
}
 80025fe:	bf00      	nop
 8002600:	3710      	adds	r7, #16
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	ffff0000 	.word	0xffff0000
 800260c:	080014e1 	.word	0x080014e1
 8002610:	080026ab 	.word	0x080026ab

08002614 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b082      	sub	sp, #8
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002622:	b2db      	uxtb	r3, r3
 8002624:	2b60      	cmp	r3, #96	@ 0x60
 8002626:	d10e      	bne.n	8002646 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2220      	movs	r2, #32
 800262c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2200      	movs	r2, #0
 8002634:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f7fe fe0f 	bl	8001262 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002644:	e009      	b.n	800265a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2200      	movs	r2, #0
 8002650:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	f7fe fdfa 	bl	800124e <HAL_I2C_ErrorCallback>
}
 800265a:	bf00      	nop
 800265c:	3708      	adds	r7, #8
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}

08002662 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002662:	b480      	push	{r7}
 8002664:	b083      	sub	sp, #12
 8002666:	af00      	add	r7, sp, #0
 8002668:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	699b      	ldr	r3, [r3, #24]
 8002670:	f003 0302 	and.w	r3, r3, #2
 8002674:	2b02      	cmp	r3, #2
 8002676:	d103      	bne.n	8002680 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2200      	movs	r2, #0
 800267e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	699b      	ldr	r3, [r3, #24]
 8002686:	f003 0301 	and.w	r3, r3, #1
 800268a:	2b01      	cmp	r3, #1
 800268c:	d007      	beq.n	800269e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	699a      	ldr	r2, [r3, #24]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f042 0201 	orr.w	r2, r2, #1
 800269c:	619a      	str	r2, [r3, #24]
  }
}
 800269e:	bf00      	nop
 80026a0:	370c      	adds	r7, #12
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr

080026aa <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80026aa:	b580      	push	{r7, lr}
 80026ac:	b084      	sub	sp, #16
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026b6:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d003      	beq.n	80026c8 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026c4:	2200      	movs	r2, #0
 80026c6:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d003      	beq.n	80026d8 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026d4:	2200      	movs	r2, #0
 80026d6:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  I2C_TreatErrorCallback(hi2c);
 80026d8:	68f8      	ldr	r0, [r7, #12]
 80026da:	f7ff ff9b 	bl	8002614 <I2C_TreatErrorCallback>
}
 80026de:	bf00      	nop
 80026e0:	3710      	adds	r7, #16
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
	...

080026e8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b087      	sub	sp, #28
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	60f8      	str	r0, [r7, #12]
 80026f0:	607b      	str	r3, [r7, #4]
 80026f2:	460b      	mov	r3, r1
 80026f4:	817b      	strh	r3, [r7, #10]
 80026f6:	4613      	mov	r3, r2
 80026f8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80026fa:	897b      	ldrh	r3, [r7, #10]
 80026fc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002700:	7a7b      	ldrb	r3, [r7, #9]
 8002702:	041b      	lsls	r3, r3, #16
 8002704:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002708:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800270e:	6a3b      	ldr	r3, [r7, #32]
 8002710:	4313      	orrs	r3, r2
 8002712:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002716:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	685a      	ldr	r2, [r3, #4]
 800271e:	6a3b      	ldr	r3, [r7, #32]
 8002720:	0d5b      	lsrs	r3, r3, #21
 8002722:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002726:	4b08      	ldr	r3, [pc, #32]	@ (8002748 <I2C_TransferConfig+0x60>)
 8002728:	430b      	orrs	r3, r1
 800272a:	43db      	mvns	r3, r3
 800272c:	ea02 0103 	and.w	r1, r2, r3
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	697a      	ldr	r2, [r7, #20]
 8002736:	430a      	orrs	r2, r1
 8002738:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800273a:	bf00      	nop
 800273c:	371c      	adds	r7, #28
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr
 8002746:	bf00      	nop
 8002748:	03ff63ff 	.word	0x03ff63ff

0800274c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800274c:	b480      	push	{r7}
 800274e:	b085      	sub	sp, #20
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	460b      	mov	r3, r1
 8002756:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8002758:	2300      	movs	r3, #0
 800275a:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002760:	4a39      	ldr	r2, [pc, #228]	@ (8002848 <I2C_Enable_IRQ+0xfc>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d032      	beq.n	80027cc <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800276a:	4a38      	ldr	r2, [pc, #224]	@ (800284c <I2C_Enable_IRQ+0x100>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d02d      	beq.n	80027cc <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8002774:	4a36      	ldr	r2, [pc, #216]	@ (8002850 <I2C_Enable_IRQ+0x104>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d028      	beq.n	80027cc <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800277a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800277e:	2b00      	cmp	r3, #0
 8002780:	da03      	bge.n	800278a <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8002788:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800278a:	887b      	ldrh	r3, [r7, #2]
 800278c:	f003 0301 	and.w	r3, r3, #1
 8002790:	2b00      	cmp	r3, #0
 8002792:	d003      	beq.n	800279c <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 800279a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800279c:	887b      	ldrh	r3, [r7, #2]
 800279e:	f003 0302 	and.w	r3, r3, #2
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d003      	beq.n	80027ae <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 80027ac:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80027ae:	887b      	ldrh	r3, [r7, #2]
 80027b0:	2b10      	cmp	r3, #16
 80027b2:	d103      	bne.n	80027bc <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80027ba:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80027bc:	887b      	ldrh	r3, [r7, #2]
 80027be:	2b20      	cmp	r3, #32
 80027c0:	d133      	bne.n	800282a <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	f043 0320 	orr.w	r3, r3, #32
 80027c8:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80027ca:	e02e      	b.n	800282a <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80027cc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	da03      	bge.n	80027dc <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80027da:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80027dc:	887b      	ldrh	r3, [r7, #2]
 80027de:	f003 0301 	and.w	r3, r3, #1
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d003      	beq.n	80027ee <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 80027ec:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80027ee:	887b      	ldrh	r3, [r7, #2]
 80027f0:	f003 0302 	and.w	r3, r3, #2
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d003      	beq.n	8002800 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 80027fe:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002800:	887b      	ldrh	r3, [r7, #2]
 8002802:	2b10      	cmp	r3, #16
 8002804:	d103      	bne.n	800280e <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800280c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800280e:	887b      	ldrh	r3, [r7, #2]
 8002810:	2b20      	cmp	r3, #32
 8002812:	d103      	bne.n	800281c <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800281a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800281c:	887b      	ldrh	r3, [r7, #2]
 800281e:	2b40      	cmp	r3, #64	@ 0x40
 8002820:	d103      	bne.n	800282a <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002828:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	6819      	ldr	r1, [r3, #0]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	68fa      	ldr	r2, [r7, #12]
 8002836:	430a      	orrs	r2, r1
 8002838:	601a      	str	r2, [r3, #0]
}
 800283a:	bf00      	nop
 800283c:	3714      	adds	r7, #20
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	080016d3 	.word	0x080016d3
 800284c:	08001b4d 	.word	0x08001b4d
 8002850:	080018c5 	.word	0x080018c5

08002854 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002854:	b480      	push	{r7}
 8002856:	b085      	sub	sp, #20
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
 800285c:	460b      	mov	r3, r1
 800285e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8002860:	2300      	movs	r3, #0
 8002862:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002864:	887b      	ldrh	r3, [r7, #2]
 8002866:	f003 0301 	and.w	r3, r3, #1
 800286a:	2b00      	cmp	r3, #0
 800286c:	d00f      	beq.n	800288e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8002874:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800287c:	b2db      	uxtb	r3, r3
 800287e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002882:	2b28      	cmp	r3, #40	@ 0x28
 8002884:	d003      	beq.n	800288e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800288c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800288e:	887b      	ldrh	r3, [r7, #2]
 8002890:	f003 0302 	and.w	r3, r3, #2
 8002894:	2b00      	cmp	r3, #0
 8002896:	d00f      	beq.n	80028b8 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 800289e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80028ac:	2b28      	cmp	r3, #40	@ 0x28
 80028ae:	d003      	beq.n	80028b8 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80028b6:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80028b8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	da03      	bge.n	80028c8 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80028c6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80028c8:	887b      	ldrh	r3, [r7, #2]
 80028ca:	2b10      	cmp	r3, #16
 80028cc:	d103      	bne.n	80028d6 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80028d4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80028d6:	887b      	ldrh	r3, [r7, #2]
 80028d8:	2b20      	cmp	r3, #32
 80028da:	d103      	bne.n	80028e4 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f043 0320 	orr.w	r3, r3, #32
 80028e2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80028e4:	887b      	ldrh	r3, [r7, #2]
 80028e6:	2b40      	cmp	r3, #64	@ 0x40
 80028e8:	d103      	bne.n	80028f2 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80028f0:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	6819      	ldr	r1, [r3, #0]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	43da      	mvns	r2, r3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	400a      	ands	r2, r1
 8002902:	601a      	str	r2, [r3, #0]
}
 8002904:	bf00      	nop
 8002906:	3714      	adds	r7, #20
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr

08002910 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002920:	b2db      	uxtb	r3, r3
 8002922:	2b20      	cmp	r3, #32
 8002924:	d138      	bne.n	8002998 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800292c:	2b01      	cmp	r3, #1
 800292e:	d101      	bne.n	8002934 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002930:	2302      	movs	r3, #2
 8002932:	e032      	b.n	800299a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2201      	movs	r2, #1
 8002938:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2224      	movs	r2, #36	@ 0x24
 8002940:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f022 0201 	bic.w	r2, r2, #1
 8002952:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002962:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	6819      	ldr	r1, [r3, #0]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	683a      	ldr	r2, [r7, #0]
 8002970:	430a      	orrs	r2, r1
 8002972:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f042 0201 	orr.w	r2, r2, #1
 8002982:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2220      	movs	r2, #32
 8002988:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2200      	movs	r2, #0
 8002990:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002994:	2300      	movs	r3, #0
 8002996:	e000      	b.n	800299a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002998:	2302      	movs	r3, #2
  }
}
 800299a:	4618      	mov	r0, r3
 800299c:	370c      	adds	r7, #12
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr

080029a6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80029a6:	b480      	push	{r7}
 80029a8:	b085      	sub	sp, #20
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
 80029ae:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	2b20      	cmp	r3, #32
 80029ba:	d139      	bne.n	8002a30 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d101      	bne.n	80029ca <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80029c6:	2302      	movs	r3, #2
 80029c8:	e033      	b.n	8002a32 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2201      	movs	r2, #1
 80029ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2224      	movs	r2, #36	@ 0x24
 80029d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f022 0201 	bic.w	r2, r2, #1
 80029e8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80029f8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	021b      	lsls	r3, r3, #8
 80029fe:	68fa      	ldr	r2, [r7, #12]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	68fa      	ldr	r2, [r7, #12]
 8002a0a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f042 0201 	orr.w	r2, r2, #1
 8002a1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2220      	movs	r2, #32
 8002a20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2200      	movs	r2, #0
 8002a28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	e000      	b.n	8002a32 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002a30:	2302      	movs	r3, #2
  }
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3714      	adds	r7, #20
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
	...

08002a40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a4c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a50:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a56:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d102      	bne.n	8002a66 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	f001 b823 	b.w	8003aac <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a6a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0301 	and.w	r3, r3, #1
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	f000 817d 	beq.w	8002d76 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002a7c:	4bbc      	ldr	r3, [pc, #752]	@ (8002d70 <HAL_RCC_OscConfig+0x330>)
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f003 030c 	and.w	r3, r3, #12
 8002a84:	2b04      	cmp	r3, #4
 8002a86:	d00c      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a88:	4bb9      	ldr	r3, [pc, #740]	@ (8002d70 <HAL_RCC_OscConfig+0x330>)
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f003 030c 	and.w	r3, r3, #12
 8002a90:	2b08      	cmp	r3, #8
 8002a92:	d15c      	bne.n	8002b4e <HAL_RCC_OscConfig+0x10e>
 8002a94:	4bb6      	ldr	r3, [pc, #728]	@ (8002d70 <HAL_RCC_OscConfig+0x330>)
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002aa0:	d155      	bne.n	8002b4e <HAL_RCC_OscConfig+0x10e>
 8002aa2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002aa6:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aaa:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8002aae:	fa93 f3a3 	rbit	r3, r3
 8002ab2:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002ab6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aba:	fab3 f383 	clz	r3, r3
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	095b      	lsrs	r3, r3, #5
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	f043 0301 	orr.w	r3, r3, #1
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d102      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x94>
 8002ace:	4ba8      	ldr	r3, [pc, #672]	@ (8002d70 <HAL_RCC_OscConfig+0x330>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	e015      	b.n	8002b00 <HAL_RCC_OscConfig+0xc0>
 8002ad4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002ad8:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002adc:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8002ae0:	fa93 f3a3 	rbit	r3, r3
 8002ae4:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8002ae8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002aec:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8002af0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8002af4:	fa93 f3a3 	rbit	r3, r3
 8002af8:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8002afc:	4b9c      	ldr	r3, [pc, #624]	@ (8002d70 <HAL_RCC_OscConfig+0x330>)
 8002afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b00:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002b04:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8002b08:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8002b0c:	fa92 f2a2 	rbit	r2, r2
 8002b10:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8002b14:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8002b18:	fab2 f282 	clz	r2, r2
 8002b1c:	b2d2      	uxtb	r2, r2
 8002b1e:	f042 0220 	orr.w	r2, r2, #32
 8002b22:	b2d2      	uxtb	r2, r2
 8002b24:	f002 021f 	and.w	r2, r2, #31
 8002b28:	2101      	movs	r1, #1
 8002b2a:	fa01 f202 	lsl.w	r2, r1, r2
 8002b2e:	4013      	ands	r3, r2
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	f000 811f 	beq.w	8002d74 <HAL_RCC_OscConfig+0x334>
 8002b36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b3a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	f040 8116 	bne.w	8002d74 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	f000 bfaf 	b.w	8003aac <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b52:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b5e:	d106      	bne.n	8002b6e <HAL_RCC_OscConfig+0x12e>
 8002b60:	4b83      	ldr	r3, [pc, #524]	@ (8002d70 <HAL_RCC_OscConfig+0x330>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a82      	ldr	r2, [pc, #520]	@ (8002d70 <HAL_RCC_OscConfig+0x330>)
 8002b66:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b6a:	6013      	str	r3, [r2, #0]
 8002b6c:	e036      	b.n	8002bdc <HAL_RCC_OscConfig+0x19c>
 8002b6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b72:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d10c      	bne.n	8002b98 <HAL_RCC_OscConfig+0x158>
 8002b7e:	4b7c      	ldr	r3, [pc, #496]	@ (8002d70 <HAL_RCC_OscConfig+0x330>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a7b      	ldr	r2, [pc, #492]	@ (8002d70 <HAL_RCC_OscConfig+0x330>)
 8002b84:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b88:	6013      	str	r3, [r2, #0]
 8002b8a:	4b79      	ldr	r3, [pc, #484]	@ (8002d70 <HAL_RCC_OscConfig+0x330>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a78      	ldr	r2, [pc, #480]	@ (8002d70 <HAL_RCC_OscConfig+0x330>)
 8002b90:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b94:	6013      	str	r3, [r2, #0]
 8002b96:	e021      	b.n	8002bdc <HAL_RCC_OscConfig+0x19c>
 8002b98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b9c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ba8:	d10c      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x184>
 8002baa:	4b71      	ldr	r3, [pc, #452]	@ (8002d70 <HAL_RCC_OscConfig+0x330>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a70      	ldr	r2, [pc, #448]	@ (8002d70 <HAL_RCC_OscConfig+0x330>)
 8002bb0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002bb4:	6013      	str	r3, [r2, #0]
 8002bb6:	4b6e      	ldr	r3, [pc, #440]	@ (8002d70 <HAL_RCC_OscConfig+0x330>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a6d      	ldr	r2, [pc, #436]	@ (8002d70 <HAL_RCC_OscConfig+0x330>)
 8002bbc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bc0:	6013      	str	r3, [r2, #0]
 8002bc2:	e00b      	b.n	8002bdc <HAL_RCC_OscConfig+0x19c>
 8002bc4:	4b6a      	ldr	r3, [pc, #424]	@ (8002d70 <HAL_RCC_OscConfig+0x330>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a69      	ldr	r2, [pc, #420]	@ (8002d70 <HAL_RCC_OscConfig+0x330>)
 8002bca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002bce:	6013      	str	r3, [r2, #0]
 8002bd0:	4b67      	ldr	r3, [pc, #412]	@ (8002d70 <HAL_RCC_OscConfig+0x330>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a66      	ldr	r2, [pc, #408]	@ (8002d70 <HAL_RCC_OscConfig+0x330>)
 8002bd6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002bda:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002bdc:	4b64      	ldr	r3, [pc, #400]	@ (8002d70 <HAL_RCC_OscConfig+0x330>)
 8002bde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002be0:	f023 020f 	bic.w	r2, r3, #15
 8002be4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002be8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	495f      	ldr	r1, [pc, #380]	@ (8002d70 <HAL_RCC_OscConfig+0x330>)
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002bf6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bfa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d059      	beq.n	8002cba <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c06:	f7fd fdd7 	bl	80007b8 <HAL_GetTick>
 8002c0a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c0e:	e00a      	b.n	8002c26 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c10:	f7fd fdd2 	bl	80007b8 <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	2b64      	cmp	r3, #100	@ 0x64
 8002c1e:	d902      	bls.n	8002c26 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002c20:	2303      	movs	r3, #3
 8002c22:	f000 bf43 	b.w	8003aac <HAL_RCC_OscConfig+0x106c>
 8002c26:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002c2a:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c2e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8002c32:	fa93 f3a3 	rbit	r3, r3
 8002c36:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8002c3a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c3e:	fab3 f383 	clz	r3, r3
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	095b      	lsrs	r3, r3, #5
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	f043 0301 	orr.w	r3, r3, #1
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d102      	bne.n	8002c58 <HAL_RCC_OscConfig+0x218>
 8002c52:	4b47      	ldr	r3, [pc, #284]	@ (8002d70 <HAL_RCC_OscConfig+0x330>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	e015      	b.n	8002c84 <HAL_RCC_OscConfig+0x244>
 8002c58:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002c5c:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c60:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8002c64:	fa93 f3a3 	rbit	r3, r3
 8002c68:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8002c6c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002c70:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8002c74:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8002c78:	fa93 f3a3 	rbit	r3, r3
 8002c7c:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8002c80:	4b3b      	ldr	r3, [pc, #236]	@ (8002d70 <HAL_RCC_OscConfig+0x330>)
 8002c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c84:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002c88:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8002c8c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8002c90:	fa92 f2a2 	rbit	r2, r2
 8002c94:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8002c98:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8002c9c:	fab2 f282 	clz	r2, r2
 8002ca0:	b2d2      	uxtb	r2, r2
 8002ca2:	f042 0220 	orr.w	r2, r2, #32
 8002ca6:	b2d2      	uxtb	r2, r2
 8002ca8:	f002 021f 	and.w	r2, r2, #31
 8002cac:	2101      	movs	r1, #1
 8002cae:	fa01 f202 	lsl.w	r2, r1, r2
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d0ab      	beq.n	8002c10 <HAL_RCC_OscConfig+0x1d0>
 8002cb8:	e05d      	b.n	8002d76 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cba:	f7fd fd7d 	bl	80007b8 <HAL_GetTick>
 8002cbe:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cc2:	e00a      	b.n	8002cda <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cc4:	f7fd fd78 	bl	80007b8 <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	2b64      	cmp	r3, #100	@ 0x64
 8002cd2:	d902      	bls.n	8002cda <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002cd4:	2303      	movs	r3, #3
 8002cd6:	f000 bee9 	b.w	8003aac <HAL_RCC_OscConfig+0x106c>
 8002cda:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002cde:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8002ce6:	fa93 f3a3 	rbit	r3, r3
 8002cea:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8002cee:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cf2:	fab3 f383 	clz	r3, r3
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	095b      	lsrs	r3, r3, #5
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	f043 0301 	orr.w	r3, r3, #1
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d102      	bne.n	8002d0c <HAL_RCC_OscConfig+0x2cc>
 8002d06:	4b1a      	ldr	r3, [pc, #104]	@ (8002d70 <HAL_RCC_OscConfig+0x330>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	e015      	b.n	8002d38 <HAL_RCC_OscConfig+0x2f8>
 8002d0c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002d10:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d14:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8002d18:	fa93 f3a3 	rbit	r3, r3
 8002d1c:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002d20:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002d24:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002d28:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8002d2c:	fa93 f3a3 	rbit	r3, r3
 8002d30:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8002d34:	4b0e      	ldr	r3, [pc, #56]	@ (8002d70 <HAL_RCC_OscConfig+0x330>)
 8002d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d38:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002d3c:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8002d40:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8002d44:	fa92 f2a2 	rbit	r2, r2
 8002d48:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8002d4c:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8002d50:	fab2 f282 	clz	r2, r2
 8002d54:	b2d2      	uxtb	r2, r2
 8002d56:	f042 0220 	orr.w	r2, r2, #32
 8002d5a:	b2d2      	uxtb	r2, r2
 8002d5c:	f002 021f 	and.w	r2, r2, #31
 8002d60:	2101      	movs	r1, #1
 8002d62:	fa01 f202 	lsl.w	r2, r1, r2
 8002d66:	4013      	ands	r3, r2
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d1ab      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x284>
 8002d6c:	e003      	b.n	8002d76 <HAL_RCC_OscConfig+0x336>
 8002d6e:	bf00      	nop
 8002d70:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d7a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0302 	and.w	r3, r3, #2
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	f000 817d 	beq.w	8003086 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002d8c:	4ba6      	ldr	r3, [pc, #664]	@ (8003028 <HAL_RCC_OscConfig+0x5e8>)
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	f003 030c 	and.w	r3, r3, #12
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d00b      	beq.n	8002db0 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002d98:	4ba3      	ldr	r3, [pc, #652]	@ (8003028 <HAL_RCC_OscConfig+0x5e8>)
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f003 030c 	and.w	r3, r3, #12
 8002da0:	2b08      	cmp	r3, #8
 8002da2:	d172      	bne.n	8002e8a <HAL_RCC_OscConfig+0x44a>
 8002da4:	4ba0      	ldr	r3, [pc, #640]	@ (8003028 <HAL_RCC_OscConfig+0x5e8>)
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d16c      	bne.n	8002e8a <HAL_RCC_OscConfig+0x44a>
 8002db0:	2302      	movs	r3, #2
 8002db2:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db6:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8002dba:	fa93 f3a3 	rbit	r3, r3
 8002dbe:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8002dc2:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dc6:	fab3 f383 	clz	r3, r3
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	095b      	lsrs	r3, r3, #5
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	f043 0301 	orr.w	r3, r3, #1
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d102      	bne.n	8002de0 <HAL_RCC_OscConfig+0x3a0>
 8002dda:	4b93      	ldr	r3, [pc, #588]	@ (8003028 <HAL_RCC_OscConfig+0x5e8>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	e013      	b.n	8002e08 <HAL_RCC_OscConfig+0x3c8>
 8002de0:	2302      	movs	r3, #2
 8002de2:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de6:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8002dea:	fa93 f3a3 	rbit	r3, r3
 8002dee:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8002df2:	2302      	movs	r3, #2
 8002df4:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002df8:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002dfc:	fa93 f3a3 	rbit	r3, r3
 8002e00:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8002e04:	4b88      	ldr	r3, [pc, #544]	@ (8003028 <HAL_RCC_OscConfig+0x5e8>)
 8002e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e08:	2202      	movs	r2, #2
 8002e0a:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8002e0e:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8002e12:	fa92 f2a2 	rbit	r2, r2
 8002e16:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8002e1a:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8002e1e:	fab2 f282 	clz	r2, r2
 8002e22:	b2d2      	uxtb	r2, r2
 8002e24:	f042 0220 	orr.w	r2, r2, #32
 8002e28:	b2d2      	uxtb	r2, r2
 8002e2a:	f002 021f 	and.w	r2, r2, #31
 8002e2e:	2101      	movs	r1, #1
 8002e30:	fa01 f202 	lsl.w	r2, r1, r2
 8002e34:	4013      	ands	r3, r2
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d00a      	beq.n	8002e50 <HAL_RCC_OscConfig+0x410>
 8002e3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e3e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	691b      	ldr	r3, [r3, #16]
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d002      	beq.n	8002e50 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	f000 be2e 	b.w	8003aac <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e50:	4b75      	ldr	r3, [pc, #468]	@ (8003028 <HAL_RCC_OscConfig+0x5e8>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e5c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	695b      	ldr	r3, [r3, #20]
 8002e64:	21f8      	movs	r1, #248	@ 0xf8
 8002e66:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e6a:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8002e6e:	fa91 f1a1 	rbit	r1, r1
 8002e72:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8002e76:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8002e7a:	fab1 f181 	clz	r1, r1
 8002e7e:	b2c9      	uxtb	r1, r1
 8002e80:	408b      	lsls	r3, r1
 8002e82:	4969      	ldr	r1, [pc, #420]	@ (8003028 <HAL_RCC_OscConfig+0x5e8>)
 8002e84:	4313      	orrs	r3, r2
 8002e86:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e88:	e0fd      	b.n	8003086 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e8e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	f000 8088 	beq.w	8002fac <HAL_RCC_OscConfig+0x56c>
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ea2:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8002ea6:	fa93 f3a3 	rbit	r3, r3
 8002eaa:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8002eae:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002eb2:	fab3 f383 	clz	r3, r3
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002ebc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002ec0:	009b      	lsls	r3, r3, #2
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ec8:	f7fd fc76 	bl	80007b8 <HAL_GetTick>
 8002ecc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ed0:	e00a      	b.n	8002ee8 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ed2:	f7fd fc71 	bl	80007b8 <HAL_GetTick>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d902      	bls.n	8002ee8 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	f000 bde2 	b.w	8003aac <HAL_RCC_OscConfig+0x106c>
 8002ee8:	2302      	movs	r3, #2
 8002eea:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eee:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8002ef2:	fa93 f3a3 	rbit	r3, r3
 8002ef6:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8002efa:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002efe:	fab3 f383 	clz	r3, r3
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	095b      	lsrs	r3, r3, #5
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	f043 0301 	orr.w	r3, r3, #1
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d102      	bne.n	8002f18 <HAL_RCC_OscConfig+0x4d8>
 8002f12:	4b45      	ldr	r3, [pc, #276]	@ (8003028 <HAL_RCC_OscConfig+0x5e8>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	e013      	b.n	8002f40 <HAL_RCC_OscConfig+0x500>
 8002f18:	2302      	movs	r3, #2
 8002f1a:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f1e:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8002f22:	fa93 f3a3 	rbit	r3, r3
 8002f26:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002f2a:	2302      	movs	r3, #2
 8002f2c:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002f30:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8002f34:	fa93 f3a3 	rbit	r3, r3
 8002f38:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8002f3c:	4b3a      	ldr	r3, [pc, #232]	@ (8003028 <HAL_RCC_OscConfig+0x5e8>)
 8002f3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f40:	2202      	movs	r2, #2
 8002f42:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8002f46:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002f4a:	fa92 f2a2 	rbit	r2, r2
 8002f4e:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8002f52:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8002f56:	fab2 f282 	clz	r2, r2
 8002f5a:	b2d2      	uxtb	r2, r2
 8002f5c:	f042 0220 	orr.w	r2, r2, #32
 8002f60:	b2d2      	uxtb	r2, r2
 8002f62:	f002 021f 	and.w	r2, r2, #31
 8002f66:	2101      	movs	r1, #1
 8002f68:	fa01 f202 	lsl.w	r2, r1, r2
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d0af      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f72:	4b2d      	ldr	r3, [pc, #180]	@ (8003028 <HAL_RCC_OscConfig+0x5e8>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f7e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	695b      	ldr	r3, [r3, #20]
 8002f86:	21f8      	movs	r1, #248	@ 0xf8
 8002f88:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f8c:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8002f90:	fa91 f1a1 	rbit	r1, r1
 8002f94:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8002f98:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8002f9c:	fab1 f181 	clz	r1, r1
 8002fa0:	b2c9      	uxtb	r1, r1
 8002fa2:	408b      	lsls	r3, r1
 8002fa4:	4920      	ldr	r1, [pc, #128]	@ (8003028 <HAL_RCC_OscConfig+0x5e8>)
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	600b      	str	r3, [r1, #0]
 8002faa:	e06c      	b.n	8003086 <HAL_RCC_OscConfig+0x646>
 8002fac:	2301      	movs	r3, #1
 8002fae:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb2:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002fb6:	fa93 f3a3 	rbit	r3, r3
 8002fba:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8002fbe:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fc2:	fab3 f383 	clz	r3, r3
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002fcc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fd8:	f7fd fbee 	bl	80007b8 <HAL_GetTick>
 8002fdc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fe0:	e00a      	b.n	8002ff8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fe2:	f7fd fbe9 	bl	80007b8 <HAL_GetTick>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d902      	bls.n	8002ff8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	f000 bd5a 	b.w	8003aac <HAL_RCC_OscConfig+0x106c>
 8002ff8:	2302      	movs	r3, #2
 8002ffa:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ffe:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8003002:	fa93 f3a3 	rbit	r3, r3
 8003006:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 800300a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800300e:	fab3 f383 	clz	r3, r3
 8003012:	b2db      	uxtb	r3, r3
 8003014:	095b      	lsrs	r3, r3, #5
 8003016:	b2db      	uxtb	r3, r3
 8003018:	f043 0301 	orr.w	r3, r3, #1
 800301c:	b2db      	uxtb	r3, r3
 800301e:	2b01      	cmp	r3, #1
 8003020:	d104      	bne.n	800302c <HAL_RCC_OscConfig+0x5ec>
 8003022:	4b01      	ldr	r3, [pc, #4]	@ (8003028 <HAL_RCC_OscConfig+0x5e8>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	e015      	b.n	8003054 <HAL_RCC_OscConfig+0x614>
 8003028:	40021000 	.word	0x40021000
 800302c:	2302      	movs	r3, #2
 800302e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003032:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8003036:	fa93 f3a3 	rbit	r3, r3
 800303a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800303e:	2302      	movs	r3, #2
 8003040:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8003044:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003048:	fa93 f3a3 	rbit	r3, r3
 800304c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8003050:	4bc8      	ldr	r3, [pc, #800]	@ (8003374 <HAL_RCC_OscConfig+0x934>)
 8003052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003054:	2202      	movs	r2, #2
 8003056:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 800305a:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800305e:	fa92 f2a2 	rbit	r2, r2
 8003062:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8003066:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 800306a:	fab2 f282 	clz	r2, r2
 800306e:	b2d2      	uxtb	r2, r2
 8003070:	f042 0220 	orr.w	r2, r2, #32
 8003074:	b2d2      	uxtb	r2, r2
 8003076:	f002 021f 	and.w	r2, r2, #31
 800307a:	2101      	movs	r1, #1
 800307c:	fa01 f202 	lsl.w	r2, r1, r2
 8003080:	4013      	ands	r3, r2
 8003082:	2b00      	cmp	r3, #0
 8003084:	d1ad      	bne.n	8002fe2 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003086:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800308a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0308 	and.w	r3, r3, #8
 8003096:	2b00      	cmp	r3, #0
 8003098:	f000 8110 	beq.w	80032bc <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800309c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030a0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	699b      	ldr	r3, [r3, #24]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d079      	beq.n	80031a0 <HAL_RCC_OscConfig+0x760>
 80030ac:	2301      	movs	r3, #1
 80030ae:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80030b6:	fa93 f3a3 	rbit	r3, r3
 80030ba:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 80030be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030c2:	fab3 f383 	clz	r3, r3
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	461a      	mov	r2, r3
 80030ca:	4bab      	ldr	r3, [pc, #684]	@ (8003378 <HAL_RCC_OscConfig+0x938>)
 80030cc:	4413      	add	r3, r2
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	461a      	mov	r2, r3
 80030d2:	2301      	movs	r3, #1
 80030d4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030d6:	f7fd fb6f 	bl	80007b8 <HAL_GetTick>
 80030da:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030de:	e00a      	b.n	80030f6 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030e0:	f7fd fb6a 	bl	80007b8 <HAL_GetTick>
 80030e4:	4602      	mov	r2, r0
 80030e6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d902      	bls.n	80030f6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80030f0:	2303      	movs	r3, #3
 80030f2:	f000 bcdb 	b.w	8003aac <HAL_RCC_OscConfig+0x106c>
 80030f6:	2302      	movs	r3, #2
 80030f8:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030fc:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8003100:	fa93 f3a3 	rbit	r3, r3
 8003104:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003108:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800310c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003110:	2202      	movs	r2, #2
 8003112:	601a      	str	r2, [r3, #0]
 8003114:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003118:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	fa93 f2a3 	rbit	r2, r3
 8003122:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003126:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800312a:	601a      	str	r2, [r3, #0]
 800312c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003130:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003134:	2202      	movs	r2, #2
 8003136:	601a      	str	r2, [r3, #0]
 8003138:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800313c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	fa93 f2a3 	rbit	r2, r3
 8003146:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800314a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800314e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003150:	4b88      	ldr	r3, [pc, #544]	@ (8003374 <HAL_RCC_OscConfig+0x934>)
 8003152:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003154:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003158:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800315c:	2102      	movs	r1, #2
 800315e:	6019      	str	r1, [r3, #0]
 8003160:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003164:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	fa93 f1a3 	rbit	r1, r3
 800316e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003172:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003176:	6019      	str	r1, [r3, #0]
  return result;
 8003178:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800317c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	fab3 f383 	clz	r3, r3
 8003186:	b2db      	uxtb	r3, r3
 8003188:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800318c:	b2db      	uxtb	r3, r3
 800318e:	f003 031f 	and.w	r3, r3, #31
 8003192:	2101      	movs	r1, #1
 8003194:	fa01 f303 	lsl.w	r3, r1, r3
 8003198:	4013      	ands	r3, r2
 800319a:	2b00      	cmp	r3, #0
 800319c:	d0a0      	beq.n	80030e0 <HAL_RCC_OscConfig+0x6a0>
 800319e:	e08d      	b.n	80032bc <HAL_RCC_OscConfig+0x87c>
 80031a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031a4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80031a8:	2201      	movs	r2, #1
 80031aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031b0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	fa93 f2a3 	rbit	r2, r3
 80031ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031be:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80031c2:	601a      	str	r2, [r3, #0]
  return result;
 80031c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031c8:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80031cc:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031ce:	fab3 f383 	clz	r3, r3
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	461a      	mov	r2, r3
 80031d6:	4b68      	ldr	r3, [pc, #416]	@ (8003378 <HAL_RCC_OscConfig+0x938>)
 80031d8:	4413      	add	r3, r2
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	461a      	mov	r2, r3
 80031de:	2300      	movs	r3, #0
 80031e0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031e2:	f7fd fae9 	bl	80007b8 <HAL_GetTick>
 80031e6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031ea:	e00a      	b.n	8003202 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031ec:	f7fd fae4 	bl	80007b8 <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	2b02      	cmp	r3, #2
 80031fa:	d902      	bls.n	8003202 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80031fc:	2303      	movs	r3, #3
 80031fe:	f000 bc55 	b.w	8003aac <HAL_RCC_OscConfig+0x106c>
 8003202:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003206:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800320a:	2202      	movs	r2, #2
 800320c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800320e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003212:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	fa93 f2a3 	rbit	r2, r3
 800321c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003220:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003224:	601a      	str	r2, [r3, #0]
 8003226:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800322a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800322e:	2202      	movs	r2, #2
 8003230:	601a      	str	r2, [r3, #0]
 8003232:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003236:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	fa93 f2a3 	rbit	r2, r3
 8003240:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003244:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003248:	601a      	str	r2, [r3, #0]
 800324a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800324e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003252:	2202      	movs	r2, #2
 8003254:	601a      	str	r2, [r3, #0]
 8003256:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800325a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	fa93 f2a3 	rbit	r2, r3
 8003264:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003268:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800326c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800326e:	4b41      	ldr	r3, [pc, #260]	@ (8003374 <HAL_RCC_OscConfig+0x934>)
 8003270:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003272:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003276:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800327a:	2102      	movs	r1, #2
 800327c:	6019      	str	r1, [r3, #0]
 800327e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003282:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	fa93 f1a3 	rbit	r1, r3
 800328c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003290:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003294:	6019      	str	r1, [r3, #0]
  return result;
 8003296:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800329a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	fab3 f383 	clz	r3, r3
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	f003 031f 	and.w	r3, r3, #31
 80032b0:	2101      	movs	r1, #1
 80032b2:	fa01 f303 	lsl.w	r3, r1, r3
 80032b6:	4013      	ands	r3, r2
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d197      	bne.n	80031ec <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032c0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 0304 	and.w	r3, r3, #4
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	f000 81a1 	beq.w	8003614 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032d2:	2300      	movs	r3, #0
 80032d4:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032d8:	4b26      	ldr	r3, [pc, #152]	@ (8003374 <HAL_RCC_OscConfig+0x934>)
 80032da:	69db      	ldr	r3, [r3, #28]
 80032dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d116      	bne.n	8003312 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032e4:	4b23      	ldr	r3, [pc, #140]	@ (8003374 <HAL_RCC_OscConfig+0x934>)
 80032e6:	69db      	ldr	r3, [r3, #28]
 80032e8:	4a22      	ldr	r2, [pc, #136]	@ (8003374 <HAL_RCC_OscConfig+0x934>)
 80032ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032ee:	61d3      	str	r3, [r2, #28]
 80032f0:	4b20      	ldr	r3, [pc, #128]	@ (8003374 <HAL_RCC_OscConfig+0x934>)
 80032f2:	69db      	ldr	r3, [r3, #28]
 80032f4:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80032f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032fc:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8003300:	601a      	str	r2, [r3, #0]
 8003302:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003306:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800330a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800330c:	2301      	movs	r3, #1
 800330e:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003312:	4b1a      	ldr	r3, [pc, #104]	@ (800337c <HAL_RCC_OscConfig+0x93c>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800331a:	2b00      	cmp	r3, #0
 800331c:	d11a      	bne.n	8003354 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800331e:	4b17      	ldr	r3, [pc, #92]	@ (800337c <HAL_RCC_OscConfig+0x93c>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a16      	ldr	r2, [pc, #88]	@ (800337c <HAL_RCC_OscConfig+0x93c>)
 8003324:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003328:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800332a:	f7fd fa45 	bl	80007b8 <HAL_GetTick>
 800332e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003332:	e009      	b.n	8003348 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003334:	f7fd fa40 	bl	80007b8 <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800333e:	1ad3      	subs	r3, r2, r3
 8003340:	2b64      	cmp	r3, #100	@ 0x64
 8003342:	d901      	bls.n	8003348 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003344:	2303      	movs	r3, #3
 8003346:	e3b1      	b.n	8003aac <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003348:	4b0c      	ldr	r3, [pc, #48]	@ (800337c <HAL_RCC_OscConfig+0x93c>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003350:	2b00      	cmp	r3, #0
 8003352:	d0ef      	beq.n	8003334 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003354:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003358:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	2b01      	cmp	r3, #1
 8003362:	d10d      	bne.n	8003380 <HAL_RCC_OscConfig+0x940>
 8003364:	4b03      	ldr	r3, [pc, #12]	@ (8003374 <HAL_RCC_OscConfig+0x934>)
 8003366:	6a1b      	ldr	r3, [r3, #32]
 8003368:	4a02      	ldr	r2, [pc, #8]	@ (8003374 <HAL_RCC_OscConfig+0x934>)
 800336a:	f043 0301 	orr.w	r3, r3, #1
 800336e:	6213      	str	r3, [r2, #32]
 8003370:	e03c      	b.n	80033ec <HAL_RCC_OscConfig+0x9ac>
 8003372:	bf00      	nop
 8003374:	40021000 	.word	0x40021000
 8003378:	10908120 	.word	0x10908120
 800337c:	40007000 	.word	0x40007000
 8003380:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003384:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d10c      	bne.n	80033aa <HAL_RCC_OscConfig+0x96a>
 8003390:	4bc1      	ldr	r3, [pc, #772]	@ (8003698 <HAL_RCC_OscConfig+0xc58>)
 8003392:	6a1b      	ldr	r3, [r3, #32]
 8003394:	4ac0      	ldr	r2, [pc, #768]	@ (8003698 <HAL_RCC_OscConfig+0xc58>)
 8003396:	f023 0301 	bic.w	r3, r3, #1
 800339a:	6213      	str	r3, [r2, #32]
 800339c:	4bbe      	ldr	r3, [pc, #760]	@ (8003698 <HAL_RCC_OscConfig+0xc58>)
 800339e:	6a1b      	ldr	r3, [r3, #32]
 80033a0:	4abd      	ldr	r2, [pc, #756]	@ (8003698 <HAL_RCC_OscConfig+0xc58>)
 80033a2:	f023 0304 	bic.w	r3, r3, #4
 80033a6:	6213      	str	r3, [r2, #32]
 80033a8:	e020      	b.n	80033ec <HAL_RCC_OscConfig+0x9ac>
 80033aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033ae:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	68db      	ldr	r3, [r3, #12]
 80033b6:	2b05      	cmp	r3, #5
 80033b8:	d10c      	bne.n	80033d4 <HAL_RCC_OscConfig+0x994>
 80033ba:	4bb7      	ldr	r3, [pc, #732]	@ (8003698 <HAL_RCC_OscConfig+0xc58>)
 80033bc:	6a1b      	ldr	r3, [r3, #32]
 80033be:	4ab6      	ldr	r2, [pc, #728]	@ (8003698 <HAL_RCC_OscConfig+0xc58>)
 80033c0:	f043 0304 	orr.w	r3, r3, #4
 80033c4:	6213      	str	r3, [r2, #32]
 80033c6:	4bb4      	ldr	r3, [pc, #720]	@ (8003698 <HAL_RCC_OscConfig+0xc58>)
 80033c8:	6a1b      	ldr	r3, [r3, #32]
 80033ca:	4ab3      	ldr	r2, [pc, #716]	@ (8003698 <HAL_RCC_OscConfig+0xc58>)
 80033cc:	f043 0301 	orr.w	r3, r3, #1
 80033d0:	6213      	str	r3, [r2, #32]
 80033d2:	e00b      	b.n	80033ec <HAL_RCC_OscConfig+0x9ac>
 80033d4:	4bb0      	ldr	r3, [pc, #704]	@ (8003698 <HAL_RCC_OscConfig+0xc58>)
 80033d6:	6a1b      	ldr	r3, [r3, #32]
 80033d8:	4aaf      	ldr	r2, [pc, #700]	@ (8003698 <HAL_RCC_OscConfig+0xc58>)
 80033da:	f023 0301 	bic.w	r3, r3, #1
 80033de:	6213      	str	r3, [r2, #32]
 80033e0:	4bad      	ldr	r3, [pc, #692]	@ (8003698 <HAL_RCC_OscConfig+0xc58>)
 80033e2:	6a1b      	ldr	r3, [r3, #32]
 80033e4:	4aac      	ldr	r2, [pc, #688]	@ (8003698 <HAL_RCC_OscConfig+0xc58>)
 80033e6:	f023 0304 	bic.w	r3, r3, #4
 80033ea:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033f0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	f000 8081 	beq.w	8003500 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033fe:	f7fd f9db 	bl	80007b8 <HAL_GetTick>
 8003402:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003406:	e00b      	b.n	8003420 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003408:	f7fd f9d6 	bl	80007b8 <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003418:	4293      	cmp	r3, r2
 800341a:	d901      	bls.n	8003420 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 800341c:	2303      	movs	r3, #3
 800341e:	e345      	b.n	8003aac <HAL_RCC_OscConfig+0x106c>
 8003420:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003424:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003428:	2202      	movs	r2, #2
 800342a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800342c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003430:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	fa93 f2a3 	rbit	r2, r3
 800343a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800343e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003442:	601a      	str	r2, [r3, #0]
 8003444:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003448:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800344c:	2202      	movs	r2, #2
 800344e:	601a      	str	r2, [r3, #0]
 8003450:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003454:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	fa93 f2a3 	rbit	r2, r3
 800345e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003462:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003466:	601a      	str	r2, [r3, #0]
  return result;
 8003468:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800346c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003470:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003472:	fab3 f383 	clz	r3, r3
 8003476:	b2db      	uxtb	r3, r3
 8003478:	095b      	lsrs	r3, r3, #5
 800347a:	b2db      	uxtb	r3, r3
 800347c:	f043 0302 	orr.w	r3, r3, #2
 8003480:	b2db      	uxtb	r3, r3
 8003482:	2b02      	cmp	r3, #2
 8003484:	d102      	bne.n	800348c <HAL_RCC_OscConfig+0xa4c>
 8003486:	4b84      	ldr	r3, [pc, #528]	@ (8003698 <HAL_RCC_OscConfig+0xc58>)
 8003488:	6a1b      	ldr	r3, [r3, #32]
 800348a:	e013      	b.n	80034b4 <HAL_RCC_OscConfig+0xa74>
 800348c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003490:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003494:	2202      	movs	r2, #2
 8003496:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003498:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800349c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	fa93 f2a3 	rbit	r2, r3
 80034a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034aa:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80034ae:	601a      	str	r2, [r3, #0]
 80034b0:	4b79      	ldr	r3, [pc, #484]	@ (8003698 <HAL_RCC_OscConfig+0xc58>)
 80034b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034b4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80034b8:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80034bc:	2102      	movs	r1, #2
 80034be:	6011      	str	r1, [r2, #0]
 80034c0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80034c4:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80034c8:	6812      	ldr	r2, [r2, #0]
 80034ca:	fa92 f1a2 	rbit	r1, r2
 80034ce:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80034d2:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80034d6:	6011      	str	r1, [r2, #0]
  return result;
 80034d8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80034dc:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80034e0:	6812      	ldr	r2, [r2, #0]
 80034e2:	fab2 f282 	clz	r2, r2
 80034e6:	b2d2      	uxtb	r2, r2
 80034e8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80034ec:	b2d2      	uxtb	r2, r2
 80034ee:	f002 021f 	and.w	r2, r2, #31
 80034f2:	2101      	movs	r1, #1
 80034f4:	fa01 f202 	lsl.w	r2, r1, r2
 80034f8:	4013      	ands	r3, r2
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d084      	beq.n	8003408 <HAL_RCC_OscConfig+0x9c8>
 80034fe:	e07f      	b.n	8003600 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003500:	f7fd f95a 	bl	80007b8 <HAL_GetTick>
 8003504:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003508:	e00b      	b.n	8003522 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800350a:	f7fd f955 	bl	80007b8 <HAL_GetTick>
 800350e:	4602      	mov	r2, r0
 8003510:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	f241 3288 	movw	r2, #5000	@ 0x1388
 800351a:	4293      	cmp	r3, r2
 800351c:	d901      	bls.n	8003522 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800351e:	2303      	movs	r3, #3
 8003520:	e2c4      	b.n	8003aac <HAL_RCC_OscConfig+0x106c>
 8003522:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003526:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800352a:	2202      	movs	r2, #2
 800352c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800352e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003532:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	fa93 f2a3 	rbit	r2, r3
 800353c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003540:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8003544:	601a      	str	r2, [r3, #0]
 8003546:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800354a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800354e:	2202      	movs	r2, #2
 8003550:	601a      	str	r2, [r3, #0]
 8003552:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003556:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	fa93 f2a3 	rbit	r2, r3
 8003560:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003564:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003568:	601a      	str	r2, [r3, #0]
  return result;
 800356a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800356e:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003572:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003574:	fab3 f383 	clz	r3, r3
 8003578:	b2db      	uxtb	r3, r3
 800357a:	095b      	lsrs	r3, r3, #5
 800357c:	b2db      	uxtb	r3, r3
 800357e:	f043 0302 	orr.w	r3, r3, #2
 8003582:	b2db      	uxtb	r3, r3
 8003584:	2b02      	cmp	r3, #2
 8003586:	d102      	bne.n	800358e <HAL_RCC_OscConfig+0xb4e>
 8003588:	4b43      	ldr	r3, [pc, #268]	@ (8003698 <HAL_RCC_OscConfig+0xc58>)
 800358a:	6a1b      	ldr	r3, [r3, #32]
 800358c:	e013      	b.n	80035b6 <HAL_RCC_OscConfig+0xb76>
 800358e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003592:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003596:	2202      	movs	r2, #2
 8003598:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800359a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800359e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	fa93 f2a3 	rbit	r2, r3
 80035a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035ac:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80035b0:	601a      	str	r2, [r3, #0]
 80035b2:	4b39      	ldr	r3, [pc, #228]	@ (8003698 <HAL_RCC_OscConfig+0xc58>)
 80035b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035b6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80035ba:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80035be:	2102      	movs	r1, #2
 80035c0:	6011      	str	r1, [r2, #0]
 80035c2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80035c6:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80035ca:	6812      	ldr	r2, [r2, #0]
 80035cc:	fa92 f1a2 	rbit	r1, r2
 80035d0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80035d4:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80035d8:	6011      	str	r1, [r2, #0]
  return result;
 80035da:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80035de:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80035e2:	6812      	ldr	r2, [r2, #0]
 80035e4:	fab2 f282 	clz	r2, r2
 80035e8:	b2d2      	uxtb	r2, r2
 80035ea:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80035ee:	b2d2      	uxtb	r2, r2
 80035f0:	f002 021f 	and.w	r2, r2, #31
 80035f4:	2101      	movs	r1, #1
 80035f6:	fa01 f202 	lsl.w	r2, r1, r2
 80035fa:	4013      	ands	r3, r2
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d184      	bne.n	800350a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003600:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8003604:	2b01      	cmp	r3, #1
 8003606:	d105      	bne.n	8003614 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003608:	4b23      	ldr	r3, [pc, #140]	@ (8003698 <HAL_RCC_OscConfig+0xc58>)
 800360a:	69db      	ldr	r3, [r3, #28]
 800360c:	4a22      	ldr	r2, [pc, #136]	@ (8003698 <HAL_RCC_OscConfig+0xc58>)
 800360e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003612:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003614:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003618:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	69db      	ldr	r3, [r3, #28]
 8003620:	2b00      	cmp	r3, #0
 8003622:	f000 8242 	beq.w	8003aaa <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003626:	4b1c      	ldr	r3, [pc, #112]	@ (8003698 <HAL_RCC_OscConfig+0xc58>)
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	f003 030c 	and.w	r3, r3, #12
 800362e:	2b08      	cmp	r3, #8
 8003630:	f000 8213 	beq.w	8003a5a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003634:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003638:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	69db      	ldr	r3, [r3, #28]
 8003640:	2b02      	cmp	r3, #2
 8003642:	f040 8162 	bne.w	800390a <HAL_RCC_OscConfig+0xeca>
 8003646:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800364a:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800364e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003652:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003654:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003658:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	fa93 f2a3 	rbit	r2, r3
 8003662:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003666:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800366a:	601a      	str	r2, [r3, #0]
  return result;
 800366c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003670:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003674:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003676:	fab3 f383 	clz	r3, r3
 800367a:	b2db      	uxtb	r3, r3
 800367c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003680:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	461a      	mov	r2, r3
 8003688:	2300      	movs	r3, #0
 800368a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800368c:	f7fd f894 	bl	80007b8 <HAL_GetTick>
 8003690:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003694:	e00c      	b.n	80036b0 <HAL_RCC_OscConfig+0xc70>
 8003696:	bf00      	nop
 8003698:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800369c:	f7fd f88c 	bl	80007b8 <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	2b02      	cmp	r3, #2
 80036aa:	d901      	bls.n	80036b0 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	e1fd      	b.n	8003aac <HAL_RCC_OscConfig+0x106c>
 80036b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036b4:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80036b8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80036bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036c2:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	fa93 f2a3 	rbit	r2, r3
 80036cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036d0:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80036d4:	601a      	str	r2, [r3, #0]
  return result;
 80036d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036da:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80036de:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036e0:	fab3 f383 	clz	r3, r3
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	095b      	lsrs	r3, r3, #5
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	f043 0301 	orr.w	r3, r3, #1
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d102      	bne.n	80036fa <HAL_RCC_OscConfig+0xcba>
 80036f4:	4bb0      	ldr	r3, [pc, #704]	@ (80039b8 <HAL_RCC_OscConfig+0xf78>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	e027      	b.n	800374a <HAL_RCC_OscConfig+0xd0a>
 80036fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036fe:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003702:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003706:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003708:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800370c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	fa93 f2a3 	rbit	r2, r3
 8003716:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800371a:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800371e:	601a      	str	r2, [r3, #0]
 8003720:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003724:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003728:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800372c:	601a      	str	r2, [r3, #0]
 800372e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003732:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	fa93 f2a3 	rbit	r2, r3
 800373c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003740:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003744:	601a      	str	r2, [r3, #0]
 8003746:	4b9c      	ldr	r3, [pc, #624]	@ (80039b8 <HAL_RCC_OscConfig+0xf78>)
 8003748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800374a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800374e:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003752:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003756:	6011      	str	r1, [r2, #0]
 8003758:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800375c:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003760:	6812      	ldr	r2, [r2, #0]
 8003762:	fa92 f1a2 	rbit	r1, r2
 8003766:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800376a:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800376e:	6011      	str	r1, [r2, #0]
  return result;
 8003770:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003774:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003778:	6812      	ldr	r2, [r2, #0]
 800377a:	fab2 f282 	clz	r2, r2
 800377e:	b2d2      	uxtb	r2, r2
 8003780:	f042 0220 	orr.w	r2, r2, #32
 8003784:	b2d2      	uxtb	r2, r2
 8003786:	f002 021f 	and.w	r2, r2, #31
 800378a:	2101      	movs	r1, #1
 800378c:	fa01 f202 	lsl.w	r2, r1, r2
 8003790:	4013      	ands	r3, r2
 8003792:	2b00      	cmp	r3, #0
 8003794:	d182      	bne.n	800369c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003796:	4b88      	ldr	r3, [pc, #544]	@ (80039b8 <HAL_RCC_OscConfig+0xf78>)
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800379e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037a2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80037aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037ae:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	6a1b      	ldr	r3, [r3, #32]
 80037b6:	430b      	orrs	r3, r1
 80037b8:	497f      	ldr	r1, [pc, #508]	@ (80039b8 <HAL_RCC_OscConfig+0xf78>)
 80037ba:	4313      	orrs	r3, r2
 80037bc:	604b      	str	r3, [r1, #4]
 80037be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037c2:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80037c6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80037ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037d0:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	fa93 f2a3 	rbit	r2, r3
 80037da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037de:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80037e2:	601a      	str	r2, [r3, #0]
  return result;
 80037e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037e8:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80037ec:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037ee:	fab3 f383 	clz	r3, r3
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80037f8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	461a      	mov	r2, r3
 8003800:	2301      	movs	r3, #1
 8003802:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003804:	f7fc ffd8 	bl	80007b8 <HAL_GetTick>
 8003808:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800380c:	e009      	b.n	8003822 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800380e:	f7fc ffd3 	bl	80007b8 <HAL_GetTick>
 8003812:	4602      	mov	r2, r0
 8003814:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	2b02      	cmp	r3, #2
 800381c:	d901      	bls.n	8003822 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	e144      	b.n	8003aac <HAL_RCC_OscConfig+0x106c>
 8003822:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003826:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800382a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800382e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003830:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003834:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	fa93 f2a3 	rbit	r2, r3
 800383e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003842:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003846:	601a      	str	r2, [r3, #0]
  return result;
 8003848:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800384c:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003850:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003852:	fab3 f383 	clz	r3, r3
 8003856:	b2db      	uxtb	r3, r3
 8003858:	095b      	lsrs	r3, r3, #5
 800385a:	b2db      	uxtb	r3, r3
 800385c:	f043 0301 	orr.w	r3, r3, #1
 8003860:	b2db      	uxtb	r3, r3
 8003862:	2b01      	cmp	r3, #1
 8003864:	d102      	bne.n	800386c <HAL_RCC_OscConfig+0xe2c>
 8003866:	4b54      	ldr	r3, [pc, #336]	@ (80039b8 <HAL_RCC_OscConfig+0xf78>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	e027      	b.n	80038bc <HAL_RCC_OscConfig+0xe7c>
 800386c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003870:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003874:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003878:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800387a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800387e:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	fa93 f2a3 	rbit	r2, r3
 8003888:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800388c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003890:	601a      	str	r2, [r3, #0]
 8003892:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003896:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800389a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800389e:	601a      	str	r2, [r3, #0]
 80038a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038a4:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	fa93 f2a3 	rbit	r2, r3
 80038ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038b2:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80038b6:	601a      	str	r2, [r3, #0]
 80038b8:	4b3f      	ldr	r3, [pc, #252]	@ (80039b8 <HAL_RCC_OscConfig+0xf78>)
 80038ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038bc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80038c0:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80038c4:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80038c8:	6011      	str	r1, [r2, #0]
 80038ca:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80038ce:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80038d2:	6812      	ldr	r2, [r2, #0]
 80038d4:	fa92 f1a2 	rbit	r1, r2
 80038d8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80038dc:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80038e0:	6011      	str	r1, [r2, #0]
  return result;
 80038e2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80038e6:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80038ea:	6812      	ldr	r2, [r2, #0]
 80038ec:	fab2 f282 	clz	r2, r2
 80038f0:	b2d2      	uxtb	r2, r2
 80038f2:	f042 0220 	orr.w	r2, r2, #32
 80038f6:	b2d2      	uxtb	r2, r2
 80038f8:	f002 021f 	and.w	r2, r2, #31
 80038fc:	2101      	movs	r1, #1
 80038fe:	fa01 f202 	lsl.w	r2, r1, r2
 8003902:	4013      	ands	r3, r2
 8003904:	2b00      	cmp	r3, #0
 8003906:	d082      	beq.n	800380e <HAL_RCC_OscConfig+0xdce>
 8003908:	e0cf      	b.n	8003aaa <HAL_RCC_OscConfig+0x106a>
 800390a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800390e:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003912:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003916:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003918:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800391c:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	fa93 f2a3 	rbit	r2, r3
 8003926:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800392a:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800392e:	601a      	str	r2, [r3, #0]
  return result;
 8003930:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003934:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003938:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800393a:	fab3 f383 	clz	r3, r3
 800393e:	b2db      	uxtb	r3, r3
 8003940:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003944:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003948:	009b      	lsls	r3, r3, #2
 800394a:	461a      	mov	r2, r3
 800394c:	2300      	movs	r3, #0
 800394e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003950:	f7fc ff32 	bl	80007b8 <HAL_GetTick>
 8003954:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003958:	e009      	b.n	800396e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800395a:	f7fc ff2d 	bl	80007b8 <HAL_GetTick>
 800395e:	4602      	mov	r2, r0
 8003960:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	2b02      	cmp	r3, #2
 8003968:	d901      	bls.n	800396e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	e09e      	b.n	8003aac <HAL_RCC_OscConfig+0x106c>
 800396e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003972:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003976:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800397a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800397c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003980:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	fa93 f2a3 	rbit	r2, r3
 800398a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800398e:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003992:	601a      	str	r2, [r3, #0]
  return result;
 8003994:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003998:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800399c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800399e:	fab3 f383 	clz	r3, r3
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	095b      	lsrs	r3, r3, #5
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	f043 0301 	orr.w	r3, r3, #1
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d104      	bne.n	80039bc <HAL_RCC_OscConfig+0xf7c>
 80039b2:	4b01      	ldr	r3, [pc, #4]	@ (80039b8 <HAL_RCC_OscConfig+0xf78>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	e029      	b.n	8003a0c <HAL_RCC_OscConfig+0xfcc>
 80039b8:	40021000 	.word	0x40021000
 80039bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039c0:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80039c4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80039c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039ce:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	fa93 f2a3 	rbit	r2, r3
 80039d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039dc:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80039e0:	601a      	str	r2, [r3, #0]
 80039e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039e6:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80039ea:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80039ee:	601a      	str	r2, [r3, #0]
 80039f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039f4:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	fa93 f2a3 	rbit	r2, r3
 80039fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a02:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003a06:	601a      	str	r2, [r3, #0]
 8003a08:	4b2b      	ldr	r3, [pc, #172]	@ (8003ab8 <HAL_RCC_OscConfig+0x1078>)
 8003a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a0c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003a10:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003a14:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003a18:	6011      	str	r1, [r2, #0]
 8003a1a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003a1e:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003a22:	6812      	ldr	r2, [r2, #0]
 8003a24:	fa92 f1a2 	rbit	r1, r2
 8003a28:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003a2c:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003a30:	6011      	str	r1, [r2, #0]
  return result;
 8003a32:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003a36:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003a3a:	6812      	ldr	r2, [r2, #0]
 8003a3c:	fab2 f282 	clz	r2, r2
 8003a40:	b2d2      	uxtb	r2, r2
 8003a42:	f042 0220 	orr.w	r2, r2, #32
 8003a46:	b2d2      	uxtb	r2, r2
 8003a48:	f002 021f 	and.w	r2, r2, #31
 8003a4c:	2101      	movs	r1, #1
 8003a4e:	fa01 f202 	lsl.w	r2, r1, r2
 8003a52:	4013      	ands	r3, r2
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d180      	bne.n	800395a <HAL_RCC_OscConfig+0xf1a>
 8003a58:	e027      	b.n	8003aaa <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a5e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	69db      	ldr	r3, [r3, #28]
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d101      	bne.n	8003a6e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e01e      	b.n	8003aac <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003a6e:	4b12      	ldr	r3, [pc, #72]	@ (8003ab8 <HAL_RCC_OscConfig+0x1078>)
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003a76:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003a7a:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003a7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a82:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	6a1b      	ldr	r3, [r3, #32]
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d10b      	bne.n	8003aa6 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003a8e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003a92:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003a96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a9a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d001      	beq.n	8003aaa <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e000      	b.n	8003aac <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003aaa:	2300      	movs	r3, #0
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	40021000 	.word	0x40021000

08003abc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b09e      	sub	sp, #120	@ 0x78
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d101      	bne.n	8003ad4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e162      	b.n	8003d9a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ad4:	4b90      	ldr	r3, [pc, #576]	@ (8003d18 <HAL_RCC_ClockConfig+0x25c>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0307 	and.w	r3, r3, #7
 8003adc:	683a      	ldr	r2, [r7, #0]
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d910      	bls.n	8003b04 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ae2:	4b8d      	ldr	r3, [pc, #564]	@ (8003d18 <HAL_RCC_ClockConfig+0x25c>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f023 0207 	bic.w	r2, r3, #7
 8003aea:	498b      	ldr	r1, [pc, #556]	@ (8003d18 <HAL_RCC_ClockConfig+0x25c>)
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003af2:	4b89      	ldr	r3, [pc, #548]	@ (8003d18 <HAL_RCC_ClockConfig+0x25c>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 0307 	and.w	r3, r3, #7
 8003afa:	683a      	ldr	r2, [r7, #0]
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d001      	beq.n	8003b04 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e14a      	b.n	8003d9a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0302 	and.w	r3, r3, #2
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d008      	beq.n	8003b22 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b10:	4b82      	ldr	r3, [pc, #520]	@ (8003d1c <HAL_RCC_ClockConfig+0x260>)
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	497f      	ldr	r1, [pc, #508]	@ (8003d1c <HAL_RCC_ClockConfig+0x260>)
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 0301 	and.w	r3, r3, #1
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	f000 80dc 	beq.w	8003ce8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d13c      	bne.n	8003bb2 <HAL_RCC_ClockConfig+0xf6>
 8003b38:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003b3c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b3e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003b40:	fa93 f3a3 	rbit	r3, r3
 8003b44:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003b46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b48:	fab3 f383 	clz	r3, r3
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	095b      	lsrs	r3, r3, #5
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	f043 0301 	orr.w	r3, r3, #1
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d102      	bne.n	8003b62 <HAL_RCC_ClockConfig+0xa6>
 8003b5c:	4b6f      	ldr	r3, [pc, #444]	@ (8003d1c <HAL_RCC_ClockConfig+0x260>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	e00f      	b.n	8003b82 <HAL_RCC_ClockConfig+0xc6>
 8003b62:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003b66:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b68:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003b6a:	fa93 f3a3 	rbit	r3, r3
 8003b6e:	667b      	str	r3, [r7, #100]	@ 0x64
 8003b70:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003b74:	663b      	str	r3, [r7, #96]	@ 0x60
 8003b76:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b78:	fa93 f3a3 	rbit	r3, r3
 8003b7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003b7e:	4b67      	ldr	r3, [pc, #412]	@ (8003d1c <HAL_RCC_ClockConfig+0x260>)
 8003b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b82:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003b86:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003b88:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003b8a:	fa92 f2a2 	rbit	r2, r2
 8003b8e:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8003b90:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003b92:	fab2 f282 	clz	r2, r2
 8003b96:	b2d2      	uxtb	r2, r2
 8003b98:	f042 0220 	orr.w	r2, r2, #32
 8003b9c:	b2d2      	uxtb	r2, r2
 8003b9e:	f002 021f 	and.w	r2, r2, #31
 8003ba2:	2101      	movs	r1, #1
 8003ba4:	fa01 f202 	lsl.w	r2, r1, r2
 8003ba8:	4013      	ands	r3, r2
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d17b      	bne.n	8003ca6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e0f3      	b.n	8003d9a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	2b02      	cmp	r3, #2
 8003bb8:	d13c      	bne.n	8003c34 <HAL_RCC_ClockConfig+0x178>
 8003bba:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003bbe:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bc0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003bc2:	fa93 f3a3 	rbit	r3, r3
 8003bc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003bc8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bca:	fab3 f383 	clz	r3, r3
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	095b      	lsrs	r3, r3, #5
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	f043 0301 	orr.w	r3, r3, #1
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d102      	bne.n	8003be4 <HAL_RCC_ClockConfig+0x128>
 8003bde:	4b4f      	ldr	r3, [pc, #316]	@ (8003d1c <HAL_RCC_ClockConfig+0x260>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	e00f      	b.n	8003c04 <HAL_RCC_ClockConfig+0x148>
 8003be4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003be8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003bec:	fa93 f3a3 	rbit	r3, r3
 8003bf0:	647b      	str	r3, [r7, #68]	@ 0x44
 8003bf2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003bf6:	643b      	str	r3, [r7, #64]	@ 0x40
 8003bf8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003bfa:	fa93 f3a3 	rbit	r3, r3
 8003bfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c00:	4b46      	ldr	r3, [pc, #280]	@ (8003d1c <HAL_RCC_ClockConfig+0x260>)
 8003c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c04:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003c08:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003c0a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003c0c:	fa92 f2a2 	rbit	r2, r2
 8003c10:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8003c12:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003c14:	fab2 f282 	clz	r2, r2
 8003c18:	b2d2      	uxtb	r2, r2
 8003c1a:	f042 0220 	orr.w	r2, r2, #32
 8003c1e:	b2d2      	uxtb	r2, r2
 8003c20:	f002 021f 	and.w	r2, r2, #31
 8003c24:	2101      	movs	r1, #1
 8003c26:	fa01 f202 	lsl.w	r2, r1, r2
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d13a      	bne.n	8003ca6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e0b2      	b.n	8003d9a <HAL_RCC_ClockConfig+0x2de>
 8003c34:	2302      	movs	r3, #2
 8003c36:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c3a:	fa93 f3a3 	rbit	r3, r3
 8003c3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003c40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c42:	fab3 f383 	clz	r3, r3
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	095b      	lsrs	r3, r3, #5
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	f043 0301 	orr.w	r3, r3, #1
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d102      	bne.n	8003c5c <HAL_RCC_ClockConfig+0x1a0>
 8003c56:	4b31      	ldr	r3, [pc, #196]	@ (8003d1c <HAL_RCC_ClockConfig+0x260>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	e00d      	b.n	8003c78 <HAL_RCC_ClockConfig+0x1bc>
 8003c5c:	2302      	movs	r3, #2
 8003c5e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c62:	fa93 f3a3 	rbit	r3, r3
 8003c66:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c68:	2302      	movs	r3, #2
 8003c6a:	623b      	str	r3, [r7, #32]
 8003c6c:	6a3b      	ldr	r3, [r7, #32]
 8003c6e:	fa93 f3a3 	rbit	r3, r3
 8003c72:	61fb      	str	r3, [r7, #28]
 8003c74:	4b29      	ldr	r3, [pc, #164]	@ (8003d1c <HAL_RCC_ClockConfig+0x260>)
 8003c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c78:	2202      	movs	r2, #2
 8003c7a:	61ba      	str	r2, [r7, #24]
 8003c7c:	69ba      	ldr	r2, [r7, #24]
 8003c7e:	fa92 f2a2 	rbit	r2, r2
 8003c82:	617a      	str	r2, [r7, #20]
  return result;
 8003c84:	697a      	ldr	r2, [r7, #20]
 8003c86:	fab2 f282 	clz	r2, r2
 8003c8a:	b2d2      	uxtb	r2, r2
 8003c8c:	f042 0220 	orr.w	r2, r2, #32
 8003c90:	b2d2      	uxtb	r2, r2
 8003c92:	f002 021f 	and.w	r2, r2, #31
 8003c96:	2101      	movs	r1, #1
 8003c98:	fa01 f202 	lsl.w	r2, r1, r2
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d101      	bne.n	8003ca6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e079      	b.n	8003d9a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ca6:	4b1d      	ldr	r3, [pc, #116]	@ (8003d1c <HAL_RCC_ClockConfig+0x260>)
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	f023 0203 	bic.w	r2, r3, #3
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	491a      	ldr	r1, [pc, #104]	@ (8003d1c <HAL_RCC_ClockConfig+0x260>)
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003cb8:	f7fc fd7e 	bl	80007b8 <HAL_GetTick>
 8003cbc:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cbe:	e00a      	b.n	8003cd6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cc0:	f7fc fd7a 	bl	80007b8 <HAL_GetTick>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d901      	bls.n	8003cd6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e061      	b.n	8003d9a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cd6:	4b11      	ldr	r3, [pc, #68]	@ (8003d1c <HAL_RCC_ClockConfig+0x260>)
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	f003 020c 	and.w	r2, r3, #12
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d1eb      	bne.n	8003cc0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ce8:	4b0b      	ldr	r3, [pc, #44]	@ (8003d18 <HAL_RCC_ClockConfig+0x25c>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 0307 	and.w	r3, r3, #7
 8003cf0:	683a      	ldr	r2, [r7, #0]
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d214      	bcs.n	8003d20 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cf6:	4b08      	ldr	r3, [pc, #32]	@ (8003d18 <HAL_RCC_ClockConfig+0x25c>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f023 0207 	bic.w	r2, r3, #7
 8003cfe:	4906      	ldr	r1, [pc, #24]	@ (8003d18 <HAL_RCC_ClockConfig+0x25c>)
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d06:	4b04      	ldr	r3, [pc, #16]	@ (8003d18 <HAL_RCC_ClockConfig+0x25c>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 0307 	and.w	r3, r3, #7
 8003d0e:	683a      	ldr	r2, [r7, #0]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d005      	beq.n	8003d20 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	e040      	b.n	8003d9a <HAL_RCC_ClockConfig+0x2de>
 8003d18:	40022000 	.word	0x40022000
 8003d1c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 0304 	and.w	r3, r3, #4
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d008      	beq.n	8003d3e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d2c:	4b1d      	ldr	r3, [pc, #116]	@ (8003da4 <HAL_RCC_ClockConfig+0x2e8>)
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	491a      	ldr	r1, [pc, #104]	@ (8003da4 <HAL_RCC_ClockConfig+0x2e8>)
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 0308 	and.w	r3, r3, #8
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d009      	beq.n	8003d5e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d4a:	4b16      	ldr	r3, [pc, #88]	@ (8003da4 <HAL_RCC_ClockConfig+0x2e8>)
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	691b      	ldr	r3, [r3, #16]
 8003d56:	00db      	lsls	r3, r3, #3
 8003d58:	4912      	ldr	r1, [pc, #72]	@ (8003da4 <HAL_RCC_ClockConfig+0x2e8>)
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003d5e:	f000 f829 	bl	8003db4 <HAL_RCC_GetSysClockFreq>
 8003d62:	4601      	mov	r1, r0
 8003d64:	4b0f      	ldr	r3, [pc, #60]	@ (8003da4 <HAL_RCC_ClockConfig+0x2e8>)
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003d6c:	22f0      	movs	r2, #240	@ 0xf0
 8003d6e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d70:	693a      	ldr	r2, [r7, #16]
 8003d72:	fa92 f2a2 	rbit	r2, r2
 8003d76:	60fa      	str	r2, [r7, #12]
  return result;
 8003d78:	68fa      	ldr	r2, [r7, #12]
 8003d7a:	fab2 f282 	clz	r2, r2
 8003d7e:	b2d2      	uxtb	r2, r2
 8003d80:	40d3      	lsrs	r3, r2
 8003d82:	4a09      	ldr	r2, [pc, #36]	@ (8003da8 <HAL_RCC_ClockConfig+0x2ec>)
 8003d84:	5cd3      	ldrb	r3, [r2, r3]
 8003d86:	fa21 f303 	lsr.w	r3, r1, r3
 8003d8a:	4a08      	ldr	r2, [pc, #32]	@ (8003dac <HAL_RCC_ClockConfig+0x2f0>)
 8003d8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003d8e:	4b08      	ldr	r3, [pc, #32]	@ (8003db0 <HAL_RCC_ClockConfig+0x2f4>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4618      	mov	r0, r3
 8003d94:	f7fc fccc 	bl	8000730 <HAL_InitTick>
  
  return HAL_OK;
 8003d98:	2300      	movs	r3, #0
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3778      	adds	r7, #120	@ 0x78
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	40021000 	.word	0x40021000
 8003da8:	08004118 	.word	0x08004118
 8003dac:	20000014 	.word	0x20000014
 8003db0:	20000018 	.word	0x20000018

08003db4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b087      	sub	sp, #28
 8003db8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	60fb      	str	r3, [r7, #12]
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	60bb      	str	r3, [r7, #8]
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	617b      	str	r3, [r7, #20]
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003dce:	4b1e      	ldr	r3, [pc, #120]	@ (8003e48 <HAL_RCC_GetSysClockFreq+0x94>)
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f003 030c 	and.w	r3, r3, #12
 8003dda:	2b04      	cmp	r3, #4
 8003ddc:	d002      	beq.n	8003de4 <HAL_RCC_GetSysClockFreq+0x30>
 8003dde:	2b08      	cmp	r3, #8
 8003de0:	d003      	beq.n	8003dea <HAL_RCC_GetSysClockFreq+0x36>
 8003de2:	e026      	b.n	8003e32 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003de4:	4b19      	ldr	r3, [pc, #100]	@ (8003e4c <HAL_RCC_GetSysClockFreq+0x98>)
 8003de6:	613b      	str	r3, [r7, #16]
      break;
 8003de8:	e026      	b.n	8003e38 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	0c9b      	lsrs	r3, r3, #18
 8003dee:	f003 030f 	and.w	r3, r3, #15
 8003df2:	4a17      	ldr	r2, [pc, #92]	@ (8003e50 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003df4:	5cd3      	ldrb	r3, [r2, r3]
 8003df6:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003df8:	4b13      	ldr	r3, [pc, #76]	@ (8003e48 <HAL_RCC_GetSysClockFreq+0x94>)
 8003dfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dfc:	f003 030f 	and.w	r3, r3, #15
 8003e00:	4a14      	ldr	r2, [pc, #80]	@ (8003e54 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003e02:	5cd3      	ldrb	r3, [r2, r3]
 8003e04:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d008      	beq.n	8003e22 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003e10:	4a0e      	ldr	r2, [pc, #56]	@ (8003e4c <HAL_RCC_GetSysClockFreq+0x98>)
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	fb02 f303 	mul.w	r3, r2, r3
 8003e1e:	617b      	str	r3, [r7, #20]
 8003e20:	e004      	b.n	8003e2c <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	4a0c      	ldr	r2, [pc, #48]	@ (8003e58 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003e26:	fb02 f303 	mul.w	r3, r2, r3
 8003e2a:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	613b      	str	r3, [r7, #16]
      break;
 8003e30:	e002      	b.n	8003e38 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003e32:	4b06      	ldr	r3, [pc, #24]	@ (8003e4c <HAL_RCC_GetSysClockFreq+0x98>)
 8003e34:	613b      	str	r3, [r7, #16]
      break;
 8003e36:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e38:	693b      	ldr	r3, [r7, #16]
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	371c      	adds	r7, #28
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr
 8003e46:	bf00      	nop
 8003e48:	40021000 	.word	0x40021000
 8003e4c:	007a1200 	.word	0x007a1200
 8003e50:	08004128 	.word	0x08004128
 8003e54:	08004138 	.word	0x08004138
 8003e58:	003d0900 	.word	0x003d0900

08003e5c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b092      	sub	sp, #72	@ 0x48
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003e64:	2300      	movs	r3, #0
 8003e66:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	f000 80cd 	beq.w	800401a <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e80:	4b86      	ldr	r3, [pc, #536]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e82:	69db      	ldr	r3, [r3, #28]
 8003e84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d10e      	bne.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e8c:	4b83      	ldr	r3, [pc, #524]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e8e:	69db      	ldr	r3, [r3, #28]
 8003e90:	4a82      	ldr	r2, [pc, #520]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e96:	61d3      	str	r3, [r2, #28]
 8003e98:	4b80      	ldr	r3, [pc, #512]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e9a:	69db      	ldr	r3, [r3, #28]
 8003e9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ea0:	60bb      	str	r3, [r7, #8]
 8003ea2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003eaa:	4b7d      	ldr	r3, [pc, #500]	@ (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d118      	bne.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003eb6:	4b7a      	ldr	r3, [pc, #488]	@ (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a79      	ldr	r2, [pc, #484]	@ (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003ebc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ec0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ec2:	f7fc fc79 	bl	80007b8 <HAL_GetTick>
 8003ec6:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ec8:	e008      	b.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003eca:	f7fc fc75 	bl	80007b8 <HAL_GetTick>
 8003ece:	4602      	mov	r2, r0
 8003ed0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ed2:	1ad3      	subs	r3, r2, r3
 8003ed4:	2b64      	cmp	r3, #100	@ 0x64
 8003ed6:	d901      	bls.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003ed8:	2303      	movs	r3, #3
 8003eda:	e0db      	b.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003edc:	4b70      	ldr	r3, [pc, #448]	@ (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d0f0      	beq.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ee8:	4b6c      	ldr	r3, [pc, #432]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003eea:	6a1b      	ldr	r3, [r3, #32]
 8003eec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ef0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ef2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d07d      	beq.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f00:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003f02:	429a      	cmp	r2, r3
 8003f04:	d076      	beq.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f06:	4b65      	ldr	r3, [pc, #404]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f08:	6a1b      	ldr	r3, [r3, #32]
 8003f0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f10:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003f14:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f18:	fa93 f3a3 	rbit	r3, r3
 8003f1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003f1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f20:	fab3 f383 	clz	r3, r3
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	461a      	mov	r2, r3
 8003f28:	4b5e      	ldr	r3, [pc, #376]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003f2a:	4413      	add	r3, r2
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	461a      	mov	r2, r3
 8003f30:	2301      	movs	r3, #1
 8003f32:	6013      	str	r3, [r2, #0]
 8003f34:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003f38:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f3c:	fa93 f3a3 	rbit	r3, r3
 8003f40:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003f42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f44:	fab3 f383 	clz	r3, r3
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	4b55      	ldr	r3, [pc, #340]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003f4e:	4413      	add	r3, r2
 8003f50:	009b      	lsls	r3, r3, #2
 8003f52:	461a      	mov	r2, r3
 8003f54:	2300      	movs	r3, #0
 8003f56:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003f58:	4a50      	ldr	r2, [pc, #320]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f5c:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003f5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f60:	f003 0301 	and.w	r3, r3, #1
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d045      	beq.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f68:	f7fc fc26 	bl	80007b8 <HAL_GetTick>
 8003f6c:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f6e:	e00a      	b.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f70:	f7fc fc22 	bl	80007b8 <HAL_GetTick>
 8003f74:	4602      	mov	r2, r0
 8003f76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d901      	bls.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003f82:	2303      	movs	r3, #3
 8003f84:	e086      	b.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8003f86:	2302      	movs	r3, #2
 8003f88:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f8c:	fa93 f3a3 	rbit	r3, r3
 8003f90:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f92:	2302      	movs	r3, #2
 8003f94:	623b      	str	r3, [r7, #32]
 8003f96:	6a3b      	ldr	r3, [r7, #32]
 8003f98:	fa93 f3a3 	rbit	r3, r3
 8003f9c:	61fb      	str	r3, [r7, #28]
  return result;
 8003f9e:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fa0:	fab3 f383 	clz	r3, r3
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	095b      	lsrs	r3, r3, #5
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	f043 0302 	orr.w	r3, r3, #2
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	2b02      	cmp	r3, #2
 8003fb2:	d102      	bne.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003fb4:	4b39      	ldr	r3, [pc, #228]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003fb6:	6a1b      	ldr	r3, [r3, #32]
 8003fb8:	e007      	b.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003fba:	2302      	movs	r3, #2
 8003fbc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fbe:	69bb      	ldr	r3, [r7, #24]
 8003fc0:	fa93 f3a3 	rbit	r3, r3
 8003fc4:	617b      	str	r3, [r7, #20]
 8003fc6:	4b35      	ldr	r3, [pc, #212]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003fc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fca:	2202      	movs	r2, #2
 8003fcc:	613a      	str	r2, [r7, #16]
 8003fce:	693a      	ldr	r2, [r7, #16]
 8003fd0:	fa92 f2a2 	rbit	r2, r2
 8003fd4:	60fa      	str	r2, [r7, #12]
  return result;
 8003fd6:	68fa      	ldr	r2, [r7, #12]
 8003fd8:	fab2 f282 	clz	r2, r2
 8003fdc:	b2d2      	uxtb	r2, r2
 8003fde:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003fe2:	b2d2      	uxtb	r2, r2
 8003fe4:	f002 021f 	and.w	r2, r2, #31
 8003fe8:	2101      	movs	r1, #1
 8003fea:	fa01 f202 	lsl.w	r2, r1, r2
 8003fee:	4013      	ands	r3, r2
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d0bd      	beq.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003ff4:	4b29      	ldr	r3, [pc, #164]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003ff6:	6a1b      	ldr	r3, [r3, #32]
 8003ff8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	4926      	ldr	r1, [pc, #152]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004002:	4313      	orrs	r3, r2
 8004004:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004006:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800400a:	2b01      	cmp	r3, #1
 800400c:	d105      	bne.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800400e:	4b23      	ldr	r3, [pc, #140]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004010:	69db      	ldr	r3, [r3, #28]
 8004012:	4a22      	ldr	r2, [pc, #136]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004014:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004018:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 0301 	and.w	r3, r3, #1
 8004022:	2b00      	cmp	r3, #0
 8004024:	d008      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004026:	4b1d      	ldr	r3, [pc, #116]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800402a:	f023 0203 	bic.w	r2, r3, #3
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	491a      	ldr	r1, [pc, #104]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004034:	4313      	orrs	r3, r2
 8004036:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 0320 	and.w	r3, r3, #32
 8004040:	2b00      	cmp	r3, #0
 8004042:	d008      	beq.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004044:	4b15      	ldr	r3, [pc, #84]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004046:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004048:	f023 0210 	bic.w	r2, r3, #16
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	4912      	ldr	r1, [pc, #72]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004052:	4313      	orrs	r3, r2
 8004054:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800405e:	2b00      	cmp	r3, #0
 8004060:	d008      	beq.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004062:	4b0e      	ldr	r3, [pc, #56]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004066:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	691b      	ldr	r3, [r3, #16]
 800406e:	490b      	ldr	r1, [pc, #44]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004070:	4313      	orrs	r3, r2
 8004072:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800407c:	2b00      	cmp	r3, #0
 800407e:	d008      	beq.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004080:	4b06      	ldr	r3, [pc, #24]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004082:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004084:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	695b      	ldr	r3, [r3, #20]
 800408c:	4903      	ldr	r1, [pc, #12]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800408e:	4313      	orrs	r3, r2
 8004090:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004092:	2300      	movs	r3, #0
}
 8004094:	4618      	mov	r0, r3
 8004096:	3748      	adds	r7, #72	@ 0x48
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}
 800409c:	40021000 	.word	0x40021000
 80040a0:	40007000 	.word	0x40007000
 80040a4:	10908100 	.word	0x10908100

080040a8 <memset>:
 80040a8:	4402      	add	r2, r0
 80040aa:	4603      	mov	r3, r0
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d100      	bne.n	80040b2 <memset+0xa>
 80040b0:	4770      	bx	lr
 80040b2:	f803 1b01 	strb.w	r1, [r3], #1
 80040b6:	e7f9      	b.n	80040ac <memset+0x4>

080040b8 <__libc_init_array>:
 80040b8:	b570      	push	{r4, r5, r6, lr}
 80040ba:	4d0d      	ldr	r5, [pc, #52]	@ (80040f0 <__libc_init_array+0x38>)
 80040bc:	4c0d      	ldr	r4, [pc, #52]	@ (80040f4 <__libc_init_array+0x3c>)
 80040be:	1b64      	subs	r4, r4, r5
 80040c0:	10a4      	asrs	r4, r4, #2
 80040c2:	2600      	movs	r6, #0
 80040c4:	42a6      	cmp	r6, r4
 80040c6:	d109      	bne.n	80040dc <__libc_init_array+0x24>
 80040c8:	4d0b      	ldr	r5, [pc, #44]	@ (80040f8 <__libc_init_array+0x40>)
 80040ca:	4c0c      	ldr	r4, [pc, #48]	@ (80040fc <__libc_init_array+0x44>)
 80040cc:	f000 f818 	bl	8004100 <_init>
 80040d0:	1b64      	subs	r4, r4, r5
 80040d2:	10a4      	asrs	r4, r4, #2
 80040d4:	2600      	movs	r6, #0
 80040d6:	42a6      	cmp	r6, r4
 80040d8:	d105      	bne.n	80040e6 <__libc_init_array+0x2e>
 80040da:	bd70      	pop	{r4, r5, r6, pc}
 80040dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80040e0:	4798      	blx	r3
 80040e2:	3601      	adds	r6, #1
 80040e4:	e7ee      	b.n	80040c4 <__libc_init_array+0xc>
 80040e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80040ea:	4798      	blx	r3
 80040ec:	3601      	adds	r6, #1
 80040ee:	e7f2      	b.n	80040d6 <__libc_init_array+0x1e>
 80040f0:	08004148 	.word	0x08004148
 80040f4:	08004148 	.word	0x08004148
 80040f8:	08004148 	.word	0x08004148
 80040fc:	0800414c 	.word	0x0800414c

08004100 <_init>:
 8004100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004102:	bf00      	nop
 8004104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004106:	bc08      	pop	{r3}
 8004108:	469e      	mov	lr, r3
 800410a:	4770      	bx	lr

0800410c <_fini>:
 800410c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800410e:	bf00      	nop
 8004110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004112:	bc08      	pop	{r3}
 8004114:	469e      	mov	lr, r3
 8004116:	4770      	bx	lr
